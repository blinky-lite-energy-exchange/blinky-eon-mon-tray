[
    {
        "id": "ce79ef46f01ee91a",
        "type": "tab",
        "label": "DeviceA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c4285970.3276d8",
        "type": "tab",
        "label": "web-app",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2c5d25cb.3428ca",
        "type": "subflow",
        "name": "App NavBar",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ca529822.9112f8",
        "type": "subflow",
        "name": "HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "99bb1519.85fc18"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "e3c68b88.d82258",
        "type": "subflow",
        "name": "App CSS",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "8341090a.df9758",
        "type": "subflow",
        "name": "App HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "966e270e.701e48"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "cf9f84d0.6fba78",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "44b51478.9c022c",
        "type": "websocket-listener",
        "path": "/blinky-power-relay/websocket",
        "wholemsg": "false"
    },
    {
        "id": "9bf2bda7e005d087",
        "type": "modbus-client",
        "name": "Cube",
        "clienttype": "simpleser",
        "bufferCommands": false,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "${SLAVEIP}",
        "tcpPort": "${SLAVEPORT}",
        "tcpType": "DEFAULT",
        "serialPort": "$(SERIALPORT)",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "6000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "10000",
        "parallelUnitIdsAllowed": false
    },
    {
        "id": "c104210d.418eb",
        "type": "template",
        "z": "2c5d25cb.3428ca",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <img src=\"/img/bl-mc-icon-inverse.png\" height=\"75px\"/>\n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/apps'><img src=\"/img/appsYellow.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b9df3f26.ab53f",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "d1d9e12b.926ff"
            ]
        ]
    },
    {
        "id": "895ba39c.86e59",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 690,
        "y": 40,
        "wires": [
            [
                "a9a62959.7c01e8"
            ]
        ]
    },
    {
        "id": "aa17ff35.7cdfd",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n{{{payload.extraScripts}}}\n    <style>\n{{{payload.css}}}\n    </style>\n    <style>\n{{{payload.extraCss}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "895ba39c.86e59"
            ]
        ]
    },
    {
        "id": "d1d9e12b.926ff",
        "type": "http response",
        "z": "ca529822.9112f8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 40,
        "wires": []
    },
    {
        "id": "c4ed2505.8c07e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var remoteApp = true;\n        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var project = '{{{payload.project}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n        var wsConnected = false;\n\n        function setRemoteApp(remoteAppSet)\n        {\n            remoteApp  = remoteAppSet;\n        }\n        function webSocketConnected()\n        {\n            return wsConnected;\n        }\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                wsConnected = true;\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                wsConnected = false;\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n                wsConnectC();\n            };\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n       });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n        function getCookie(extension)\n        {\n            var cookies = document.cookie.split(';');\n            var token = null;\n            var cookieName = project + extension + \"=\";\n            for (var icookie = 0; icookie < cookies.length; ++icookie)\n            {\n                var index = cookies[icookie].indexOf(cookieName);\n                if (index >= 0)\n                {\n                    token = cookies[icookie].substring(index + cookieName.length);\n                }\n            }\n            return token;\n        }\n        function sendActionMsg(topic,role,actionMsg)\n        {\n            var roleToken = \"\";\n            if (remoteApp) roleToken  = getCookie('Role');\n            if (roleToken == null)\n            {\n                location.reload();\n                return;\n            }\n            var webSocketMsg = \n            {\n                topic     : topic,\n                payload   : actionMsg,\n                userID    : userID,\n                token     : getCookie('Role'),\n                role      : role\n            };\n            ws.send(JSON.stringify(webSocketMsg));\n        }\n",
        "output": "str",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "aa17ff35.7cdfd"
            ]
        ]
    },
    {
        "id": "99bb1519.85fc18",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "Get project name and userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['project'] = global.get('project')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "c4ed2505.8c07e8"
            ]
        ]
    },
    {
        "id": "a9a62959.7c01e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "35ffcf83.1547"
            ]
        ]
    },
    {
        "id": "35ffcf83.1547",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "IP filter",
        "func": "var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 40,
        "wires": [
            [
                "b9df3f26.ab53f"
            ]
        ]
    },
    {
        "id": "f5a9eda8.5c5bc",
        "type": "template",
        "z": "e3c68b88.d82258",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #415c71;\n          --color2: #547792;\n          --color3: #9eb5c7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n       .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        input.inputLarger \n        { \n            transform: scale(3); \n            margin: 1px;\n        }\n        .googleSlide4by3-container \n        {\n            position: relative;\n            overflow: hidden;\n            padding-top: 75.0%;\n        }\n        .googleSlide4by3-iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: 0;\n        }        \n        .custom-select\n        {\n            color: black;\n            background-color: white;\n            height:80px;\n            line-height:70px;\n        }\n",
        "output": "str",
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "966e270e.701e48",
        "type": "subflow:e3c68b88.d82258",
        "z": "8341090a.df9758",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "899d0666.97b868"
            ]
        ]
    },
    {
        "id": "9460eaf0.da7628",
        "type": "subflow:ca529822.9112f8",
        "z": "8341090a.df9758",
        "name": "",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "899d0666.97b868",
        "type": "subflow:2c5d25cb.3428ca",
        "z": "8341090a.df9758",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "9460eaf0.da7628"
            ]
        ]
    },
    {
        "id": "e20ca15fb632434b",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Save device config in Memory",
        "func": "msg.payload.settingInProgress = 1;\nmsg.payload.archiveNow = 0;\nflow.set('device', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "3779e6db85af1353"
            ]
        ]
    },
    {
        "id": "fc2eb29072424bfd",
        "type": "inject",
        "z": "ce79ef46f01ee91a",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "30b018e34b199814"
            ]
        ]
    },
    {
        "id": "c7d1bc1a67fe9dc2",
        "type": "file in",
        "z": "ce79ef46f01ee91a",
        "name": "Read device config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 490,
        "y": 60,
        "wires": [
            [
                "27ecc7397c9f962d"
            ]
        ]
    },
    {
        "id": "27ecc7397c9f962d",
        "type": "json",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 650,
        "y": 60,
        "wires": [
            [
                "e20ca15fb632434b"
            ]
        ]
    },
    {
        "id": "30b018e34b199814",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n    configFile  :   mqttSplit[1] + '-' + mqttSplit[2] + '.json',\n    mapFile     :   mqttSplit[1] + '-' + mqttSplit[2] + '-map.json'\n};\nflow.set('deviceProps',deviceProps);\nreturn {topic: 'readFile', 'filename':deviceProps.configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "c7d1bc1a67fe9dc2"
            ]
        ]
    },
    {
        "id": "5779bd77397a4f17",
        "type": "file",
        "z": "ce79ef46f01ee91a",
        "name": "Init Settings",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1390,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "6506eac4254d5feb",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Save Settings to File",
        "func": "var jsonPretty = JSON.stringify(flow.get('device'),null,2);\nreturn {topic: msg.payload, payload:jsonPretty, 'filename':flow.get('deviceProps').configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 340,
        "wires": [
            [
                "5779bd77397a4f17"
            ]
        ]
    },
    {
        "id": "080e8b7be1b3f16a",
        "type": "link in",
        "z": "ce79ef46f01ee91a",
        "name": "Device A web socket in",
        "links": [
            "ea909034.6fb25"
        ],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "082b52af535c3321"
            ]
        ]
    },
    {
        "id": "80e5dcb40b864249",
        "type": "json",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "4eedce1128796fe2"
            ]
        ]
    },
    {
        "id": "59f0086d1e50fb2a",
        "type": "exec",
        "z": "ce79ef46f01ee91a",
        "command": "pm2 restart red",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Restart",
        "x": 500,
        "y": 960,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "dcaeb5f28d993109",
        "type": "switch",
        "z": "ce79ef46f01ee91a",
        "name": "Reset Tray",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 980,
        "wires": [
            [
                "59f0086d1e50fb2a"
            ],
            [
                "87dc68aae06d77df"
            ]
        ]
    },
    {
        "id": "87dc68aae06d77df",
        "type": "exec",
        "z": "ce79ef46f01ee91a",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 500,
        "y": 1020,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "7f81d57f1839a56a",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 980,
        "wires": [
            [
                "dcaeb5f28d993109"
            ]
        ]
    },
    {
        "id": "dfb8a6f09ed18976",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Prepare MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 260,
        "wires": [
            [
                "9c19993afce72c6e"
            ]
        ]
    },
    {
        "id": "94dddf198fbea2df",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Create Readings",
        "func": "var initCube = msg.payload.data[0];\nvar device = flow.get('device');\nvar restartModbusMsg = null;\nif (device.settingInProgress < 0)\n{\n    device.settingInProgress = 0;\n    restartModbusMsg = {topic:'restartModbus', payload:true};\n    node.warn('Restart Modbus complete');\n}\nvar dataView     = new DataView(new ArrayBuffer(24));\ndataView.setUint8(0, msg.payload.buffer[6]);\ndataView.setUint8(1, msg.payload.buffer[7]);\ndataView.setUint8(2, msg.payload.buffer[4]);\ndataView.setUint8(3, msg.payload.buffer[5]);\ndevice.irCount.value = dataView.getUint32(0);\nvar lastIrCount = context.get('lastIrCount');\nif ((initCube == 1) || (lastIrCount < 0) || (lastIrCount > device.irCount.value) ) lastIrCount = device.irCount.value;\ndevice.hourEnergy.value = (device.irCount.value - lastIrCount) / 1000;\ncontext.set('lastIrCount',device.irCount.value);\n\ndevice.ehourCost.value = Math.round(100 * flow.get('eprice') * device.hourEnergy.value) / 100;\ndevice.vbat.value = Math.round(100 * 2.0 * 3.3* msg.payload.data[1] / 1024) / 100;\nvar now = new Date();\nnow.setMilliseconds(0);\nnow.setSeconds(0);\nnow.setMinutes(0);\ndevice.countTimeStamp.value = now.getTime();\ndevice.timeStamp = device.countTimeStamp.value;\ndevice.archiveNow = 1;\nnode.warn(device.irCount.value.toString() + ' ' + device.hourEnergy.value.toString() + ' ' + device.ehourCost.value.toString() + ' ' + device.vbat.value.toString());\nvar initCubeMsg = null;\nif (initCube == 1)\n{\n    initCubeMsg = {topic:\"initCube\",payload:true};\n    device.settingInProgress = 1;\n}\nreturn  [{topic:'newSettingDone', payload:true}, initCubeMsg, restartModbusMsg];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastIrCount',-1);",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "61c2ee12fae9cbf1",
                "20fe21048e9b9b39"
            ],
            [
                "74c6d394f2452a62",
                "f0c1e263384a520f"
            ],
            [
                "f0c1e263384a520f"
            ]
        ]
    },
    {
        "id": "9c19993afce72c6e",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Device A web socket out",
        "mode": "link",
        "links": [
            "d033193d.436d68"
        ],
        "x": 1395,
        "y": 260,
        "wires": []
    },
    {
        "id": "71ae80a656c00e15",
        "type": "inject",
        "z": "ce79ef46f01ee91a",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "15",
        "topic": "readTable",
        "payloadType": "date",
        "x": 130,
        "y": 660,
        "wires": [
            [
                "e7e361e5afc232d7"
            ]
        ]
    },
    {
        "id": "dfd383f6b74e0cdf",
        "type": "modbus-flex-getter",
        "z": "ce79ef46f01ee91a",
        "name": "Modbus Read",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "9bf2bda7e005d087",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 500,
        "y": 660,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "feb0c9be3896e508",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Create Setting",
        "func": "var device = flow.get('device');\nvar modbusSettingMsg = \n{\n    topic : msg.topic, \n    payload : { value: msg.payload.value, 'fc': 0x6, 'unitid': 1, 'address': -1 , 'quantity': 1 } \n}\nvar modbusMessage = false;\nswitch(msg.payload.attr)\n{\n    case 'test':\n        device.test.value  = msg.payload.value;\n        modbusMessage = false;\n        break;\n    default:\n        break;\n}\nvar msgArray = [null,null,null];\nif (modbusMessage)\n{\n    device.settingInProgress = 1;\n    var settingInProgressMsg = {topic:'settingInProgress', payload:true};\n    msgArray = [modbusSettingMsg, settingInProgressMsg, null];\n    \n}\nelse\n{\n    device.settingInProgress = 0;\n    msgArray = [null,null,{topic:'settingDone', payload:true}];\n}\nreturn msgArray;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 340,
        "wires": [
            [
                "0fa259f96950032f"
            ],
            [
                "86f177df381b40a3"
            ],
            [
                "8287f2bf4cdd395b"
            ]
        ]
    },
    {
        "id": "26de5f73575775f7",
        "type": "modbus-flex-write",
        "z": "ce79ef46f01ee91a",
        "name": "Modbus set",
        "showStatusActivities": true,
        "showErrors": true,
        "server": "9bf2bda7e005d087",
        "emptyMsgOnFail": false,
        "keepMsgProperties": true,
        "x": 530,
        "y": 340,
        "wires": [
            [],
            [
                "06cee1a119575ed4"
            ]
        ]
    },
    {
        "id": "06cee1a119575ed4",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Check Modbus Setting",
        "func": "device = flow.get('device');\ndevice.settingInProgress = 0;\nswitch(msg.payload.address)\n{\n    case 4:\n        device.nsamples.value  = msg.payload.value;\n        break;\n    case 5:\n        device.nfilter.value   = msg.payload.value;\n        break;\n    case 6:\n        device.powerOn.value   = msg.payload.value;\n        break;\n    default:\n        break;\n}\nreturn {topic:'settingCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 340,
        "wires": [
            [
                "aaabe575198f3fcc"
            ]
        ]
    },
    {
        "id": "0fa259f96950032f",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "26de5f73575775f7"
            ]
        ]
    },
    {
        "id": "3dc8a08d6a891e59",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "New Setting In",
        "links": [
            "706d51cc29f8cf61"
        ],
        "x": 755,
        "y": 140,
        "wires": []
    },
    {
        "id": "706d51cc29f8cf61",
        "type": "link in",
        "z": "ce79ef46f01ee91a",
        "name": "Modbus setting in",
        "links": [
            "3dc8a08d6a891e59",
            "8e4c017e68b2e16b"
        ],
        "x": 55,
        "y": 340,
        "wires": [
            [
                "feb0c9be3896e508"
            ]
        ]
    },
    {
        "id": "0244634fdb568467",
        "type": "switch",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 160,
        "wires": [
            [
                "3dc8a08d6a891e59"
            ],
            [
                "78dc1ef55e87344f"
            ],
            [
                "e7ab55f925ca7596"
            ],
            [
                "661b575f3eb57a5f"
            ]
        ]
    },
    {
        "id": "4eedce1128796fe2",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[4], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "0244634fdb568467"
            ]
        ]
    },
    {
        "id": "44eaf2022c128f46",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Shift Msg",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "13622004a965559c"
            ]
        ]
    },
    {
        "id": "13622004a965559c",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Filter Websocket",
        "func": "var inputDeviceProps = msg.payload.topic.split('/');\nvar deviceProps = flow.get('deviceProps')\nif (inputDeviceProps[0] != deviceProps.project) return null;\nif (inputDeviceProps[1] != deviceProps.deviceType) return null;\nif (inputDeviceProps[2] != deviceProps.name) return null;\nreturn {topic:msg.topic, payload:msg.payload.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "0244634fdb568467"
            ]
        ]
    },
    {
        "id": "082b52af535c3321",
        "type": "json",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "44eaf2022c128f46"
            ]
        ]
    },
    {
        "id": "e7e361e5afc232d7",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Read Modbus",
        "func": "if (flow.get('device').settingInProgress == 1) return null;\nvar modeBusCommand = { 'fc': 0x3, 'unitid': 1, 'address': 0 , 'quantity': 4 } ;\nreturn {topic: \"readStatus\", payload:modeBusCommand};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 660,
        "wires": [
            [
                "dfd383f6b74e0cdf"
            ]
        ]
    },
    {
        "id": "13f60be205b89b7d",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Publish device",
        "func": "if (!msg.payload) return null;\nvar device = flow.get('device');\nvar newMsg = \n{\n    topic: flow.get('deviceProps').project + '/' + flow.get('deviceProps').deviceType + '/' + flow.get('deviceProps').name + '/reading',\n    payload: JSON.stringify(device)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 220,
        "wires": [
            [
                "dfb8a6f09ed18976",
                "5eec44615361be25"
            ]
        ]
    },
    {
        "id": "2150949730b4ba06",
        "type": "link in",
        "z": "ce79ef46f01ee91a",
        "name": "Publish Device In",
        "links": [
            "20fe21048e9b9b39",
            "78dc1ef55e87344f",
            "86f177df381b40a3",
            "aaabe575198f3fcc",
            "5acddb44fd53cefc",
            "10e5520c8e21050f",
            "2728624acd3a5537",
            "8287f2bf4cdd395b",
            "f0c1e263384a520f",
            "8b5512137fd83f50"
        ],
        "x": 915,
        "y": 220,
        "wires": [
            [
                "13f60be205b89b7d"
            ]
        ]
    },
    {
        "id": "20fe21048e9b9b39",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Alarm Scan out",
        "links": [
            "2150949730b4ba06"
        ],
        "x": 1275,
        "y": 640,
        "wires": []
    },
    {
        "id": "78dc1ef55e87344f",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Ping Out",
        "links": [
            "2150949730b4ba06"
        ],
        "x": 755,
        "y": 180,
        "wires": []
    },
    {
        "id": "86f177df381b40a3",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Create Setting out",
        "links": [
            "2150949730b4ba06"
        ],
        "x": 315,
        "y": 380,
        "wires": []
    },
    {
        "id": "04fec5b44db8b4da",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Init cube",
        "func": "var device = flow.get('device');\nvar msgs = [];\nvar initCube = 0;\n//msgs[0] = { value: device.nsamples.value,               'fc': 0x6, 'unitid': 1, 'address': 4 , 'quantity': 1 };\n//msgs[1] = { value: device.nfilter.value,                'fc': 0x6, 'unitid': 1, 'address': 5 , 'quantity': 1 };\n//msgs[2] = { value: device.powerOn.value,                'fc': 0x6, 'unitid': 1, 'address': 6 , 'quantity': 1 };\n//must be the last!\nmsgs[0] = { value: initCube,                            'fc': 0x6, 'unitid': 1, 'address': 0 , 'quantity': 1 };\nreturn {topic : 'initCube', payload: msgs};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1200,
        "y": 60,
        "wires": [
            [
                "2134d3a9102ee7b8"
            ]
        ]
    },
    {
        "id": "2134d3a9102ee7b8",
        "type": "split",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1330,
        "y": 60,
        "wires": [
            [
                "e45b9b5f96ba6d73"
            ]
        ]
    },
    {
        "id": "e45b9b5f96ba6d73",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1480,
        "y": 60,
        "wires": [
            [
                "647f248407479387"
            ]
        ]
    },
    {
        "id": "647f248407479387",
        "type": "modbus-flex-write",
        "z": "ce79ef46f01ee91a",
        "name": "Modbus init",
        "showStatusActivities": true,
        "showErrors": true,
        "server": "9bf2bda7e005d087",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1650,
        "y": 60,
        "wires": [
            [],
            [
                "3c51c680e18abf95"
            ]
        ]
    },
    {
        "id": "765936897007ed33",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Pause Device readings",
        "func": "var device = flow.get('device');\ndevice.settingInProgress = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 520,
        "wires": [
            [
                "811ed9a3c4b1d325",
                "5acddb44fd53cefc"
            ]
        ]
    },
    {
        "id": "e7ab55f925ca7596",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Config Out",
        "links": [
            "23ede8e3cc8ed0c4"
        ],
        "x": 755,
        "y": 220,
        "wires": []
    },
    {
        "id": "23ede8e3cc8ed0c4",
        "type": "link in",
        "z": "ce79ef46f01ee91a",
        "name": "Pause Device Readings in",
        "links": [
            "e7ab55f925ca7596"
        ],
        "x": 55,
        "y": 520,
        "wires": [
            [
                "765936897007ed33"
            ]
        ]
    },
    {
        "id": "811ed9a3c4b1d325",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 520,
        "wires": [
            [
                "21cfacd892938a9b"
            ]
        ]
    },
    {
        "id": "21cfacd892938a9b",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Save config file",
        "func": "flow.set('device',JSON.parse(JSON.stringify(msg.payload)));\nvar device = flow.get('device');\ndevice.settingInProgress = 1;\n\nreturn {topic:'deviceConfigCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 520,
        "wires": [
            [
                "c0516b9c0339c754",
                "a33e3eb6d5d30179"
            ]
        ]
    },
    {
        "id": "c0516b9c0339c754",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 520,
        "wires": [
            [
                "a705b22a29df7c9d"
            ]
        ]
    },
    {
        "id": "a705b22a29df7c9d",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Continue Device readings",
        "func": "var device = flow.get('device');\ndevice.settingInProgress = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "10e5520c8e21050f"
            ]
        ]
    },
    {
        "id": "aaabe575198f3fcc",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Check Modbus Setting out",
        "links": [
            "52c3ee5d26adffbe",
            "2150949730b4ba06"
        ],
        "x": 895,
        "y": 340,
        "wires": []
    },
    {
        "id": "52c3ee5d26adffbe",
        "type": "link in",
        "z": "ce79ef46f01ee91a",
        "name": "Save Settings to file in",
        "links": [
            "8287f2bf4cdd395b",
            "a33e3eb6d5d30179",
            "aaabe575198f3fcc",
            "cf75d205fd484043"
        ],
        "x": 1035,
        "y": 340,
        "wires": [
            [
                "6506eac4254d5feb"
            ]
        ]
    },
    {
        "id": "5acddb44fd53cefc",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Pause Device Readings out",
        "links": [
            "2150949730b4ba06"
        ],
        "x": 395,
        "y": 480,
        "wires": []
    },
    {
        "id": "a33e3eb6d5d30179",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Save config file out",
        "links": [
            "52c3ee5d26adffbe"
        ],
        "x": 755,
        "y": 460,
        "wires": []
    },
    {
        "id": "10e5520c8e21050f",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Continue Devie Readings out",
        "links": [
            "2150949730b4ba06"
        ],
        "x": 1195,
        "y": 520,
        "wires": []
    },
    {
        "id": "661b575f3eb57a5f",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Reset Out",
        "links": [
            "74a8a195ebe277f9"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "74a8a195ebe277f9",
        "type": "link in",
        "z": "ce79ef46f01ee91a",
        "name": "Reset in",
        "links": [
            "661b575f3eb57a5f"
        ],
        "x": 55,
        "y": 980,
        "wires": [
            [
                "7f81d57f1839a56a"
            ]
        ]
    },
    {
        "id": "8287f2bf4cdd395b",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "nonModbusSetting Out",
        "links": [
            "52c3ee5d26adffbe",
            "2150949730b4ba06"
        ],
        "x": 315,
        "y": 420,
        "wires": []
    },
    {
        "id": "dbab599e598d3f01",
        "type": "mqtt in",
        "z": "ce79ef46f01ee91a",
        "name": "Subscribe DeviceA",
        "topic": "$(MQTTDEVICEA)",
        "qos": "0",
        "datatype": "auto",
        "broker": "cf9f84d0.6fba78",
        "inputs": 0,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "80e5dcb40b864249"
            ]
        ]
    },
    {
        "id": "5eec44615361be25",
        "type": "mqtt out",
        "z": "ce79ef46f01ee91a",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf9f84d0.6fba78",
        "x": 1250,
        "y": 180,
        "wires": []
    },
    {
        "id": "74c6d394f2452a62",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 980,
        "y": 680,
        "wires": [
            [
                "9ecac5e72feeaa9c"
            ]
        ]
    },
    {
        "id": "f0c1e263384a520f",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "Start Init Cube",
        "mode": "link",
        "links": [
            "2150949730b4ba06"
        ],
        "x": 715,
        "y": 760,
        "wires": []
    },
    {
        "id": "5aebb0b38ba2e191",
        "type": "link in",
        "z": "ce79ef46f01ee91a",
        "name": "read device config in",
        "links": [
            "961b85c2472cee35"
        ],
        "x": 355,
        "y": 100,
        "wires": [
            [
                "c7d1bc1a67fe9dc2"
            ]
        ]
    },
    {
        "id": "961b85c2472cee35",
        "type": "link out",
        "z": "ce79ef46f01ee91a",
        "name": "begin re-init cube",
        "mode": "link",
        "links": [
            "5aebb0b38ba2e191"
        ],
        "x": 1295,
        "y": 680,
        "wires": []
    },
    {
        "id": "3c51c680e18abf95",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Allow Readings",
        "func": "if (msg.payload.address == 0) flow.get(\"device\").settingInProgress = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1840,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9ecac5e72feeaa9c",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Set input filename",
        "func": "var deviceProps = flow.get('deviceProps');\nreturn {topic: 'readFile', 'filename':deviceProps.configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 680,
        "wires": [
            [
                "961b85c2472cee35"
            ]
        ]
    },
    {
        "id": "bf552c02a1ddf527",
        "type": "catch",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "scope": [
            "647f248407479387"
        ],
        "uncaught": false,
        "x": 1690,
        "y": 120,
        "wires": [
            [
                "b96374fabc58144c"
            ]
        ]
    },
    {
        "id": "b96374fabc58144c",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Modbus Init fail",
        "func": "if (msg.payload.address == 0)\n{\n    flow.get(\"device\").settingInProgress = 0;\n}\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 120,
        "wires": []
    },
    {
        "id": "de9bde626d76d559",
        "type": "debug",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1450,
        "y": 500,
        "wires": []
    },
    {
        "id": "254741da8f62583b",
        "type": "catch",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "scope": [
            "647f248407479387",
            "26de5f73575775f7"
        ],
        "uncaught": false,
        "x": 1270,
        "y": 440,
        "wires": [
            [
                "562261a5697b77c0",
                "de9bde626d76d559"
            ]
        ]
    },
    {
        "id": "562261a5697b77c0",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Modbus Set bad setting",
        "func": "flow.get(\"device\").settingInProgress = -1;\nreturn null",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 440,
        "wires": []
    },
    {
        "id": "3779e6db85af1353",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1060,
        "y": 60,
        "wires": [
            [
                "04fec5b44db8b4da"
            ]
        ]
    },
    {
        "id": "83f6e075.50977",
        "type": "inject",
        "z": "ce79ef46f01ee91a",
        "name": "Every hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1300,
        "wires": [
            [
                "b5a41827.135818"
            ]
        ]
    },
    {
        "id": "b5a41827.135818",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 1300,
        "wires": [
            [
                "bb6ef20619e92fb7"
            ]
        ]
    },
    {
        "id": "39d662de.59d5ae",
        "type": "inject",
        "z": "ce79ef46f01ee91a",
        "name": "Init+20sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "bb6ef20619e92fb7"
            ]
        ]
    },
    {
        "id": "24cbd4a6.71fc9c",
        "type": "json",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 1400,
        "wires": [
            [
                "52d37fdf.e223a"
            ]
        ]
    },
    {
        "id": "52d37fdf.e223a",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "Save espotPrice",
        "func": "flow.set('eprice',msg.payload.price.value);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1400,
        "wires": []
    },
    {
        "id": "bb6ef20619e92fb7",
        "type": "mqtt out",
        "z": "ce79ef46f01ee91a",
        "name": "Spot Price Ping",
        "topic": "$(SPOTPRICEPING)",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf9f84d0.6fba78",
        "x": 460,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6a12b4af7f42b255",
        "type": "mqtt in",
        "z": "ce79ef46f01ee91a",
        "name": "Spot Price Reading",
        "topic": "$(SPOTPRICEREADING)",
        "qos": "0",
        "datatype": "auto",
        "broker": "cf9f84d0.6fba78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1400,
        "wires": [
            [
                "24cbd4a6.71fc9c"
            ]
        ]
    },
    {
        "id": "cc87e48c94a822d4",
        "type": "function",
        "z": "ce79ef46f01ee91a",
        "name": "ArchiveNow to 0 ",
        "func": "flow.get('device').archiveNow = 0;\nreturn {topic:'newPriceReading', payload:true};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 580,
        "wires": [
            [
                "20fe21048e9b9b39"
            ]
        ]
    },
    {
        "id": "61c2ee12fae9cbf1",
        "type": "delay",
        "z": "ce79ef46f01ee91a",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 880,
        "y": 580,
        "wires": [
            [
                "cc87e48c94a822d4"
            ]
        ]
    },
    {
        "id": "68f91193.6031a",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Set Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky Power Relay {{{payload.script.name}}}",
        "output": "str",
        "x": 340,
        "y": 460,
        "wires": [
            [
                "493fb622.d8afc8"
            ]
        ]
    },
    {
        "id": "6ff41f15.de1a2",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSwitch.png",
        "output": "str",
        "x": 350,
        "y": 420,
        "wires": [
            [
                "68f91193.6031a"
            ]
        ]
    },
    {
        "id": "cf44f6bf.8956b8",
        "type": "websocket in",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 160,
        "y": 980,
        "wires": [
            [
                "ea909034.6fb25"
            ]
        ]
    },
    {
        "id": "62aaa250.9b67dc",
        "type": "websocket out",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 950,
        "y": 980,
        "wires": []
    },
    {
        "id": "ea909034.6fb25",
        "type": "link out",
        "z": "c4285970.3276d8",
        "name": "Web socket out",
        "links": [
            "2f289f87.fe2ff",
            "c7f3b5bf.85c9a8",
            "916409fc.7bc138",
            "080e8b7be1b3f16a"
        ],
        "x": 395,
        "y": 980,
        "wires": []
    },
    {
        "id": "d033193d.436d68",
        "type": "link in",
        "z": "c4285970.3276d8",
        "name": "Web socket in",
        "links": [
            "1cdcbcd8.9514e3",
            "78ceea9e.d0b204",
            "d0d46d90.cf476",
            "9c19993afce72c6e"
        ],
        "x": 755,
        "y": 980,
        "wires": [
            [
                "62aaa250.9b67dc"
            ]
        ]
    },
    {
        "id": "1482e22f.57fa2e",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay",
        "url": "/blinky-power-relay",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "71ce0943.81bf18"
            ]
        ]
    },
    {
        "id": "71ce0943.81bf18",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Set Name And Device Type",
        "func": "msg.payload['script'] = {};\nmsg.payload['script']['name'] = msg.payload.name\nmsg.payload['script']['deviceType'] = 'blinky-power-relay';\nmsg.payload['script']['project'] = global.get('project');\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "6ff41f15.de1a2"
            ]
        ]
    },
    {
        "id": "70be1872.dfaf48",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/apps",
        "url": "/apps",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "af9642ae.0c0da"
            ]
        ]
    },
    {
        "id": "b1885d32.8d9cc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n    <div class='container' width=\"100%\">\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/blinky-power-relay?name={{{payload.deviceAName}}}\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/yellowSwitch.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">Blinky Power Relay {{{payload.deviceAName}}}</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n        <div class='row vert-pad' >\n            <div class='col-md-12'>\n                <a class=\"btn jumbotron-button btn-block big-text bold-text\" width='80%' href=\"/setup\" >\n                    <table width=\"100%\" alight=\"left\">\n                        <tr>\n                            <td width=\"30%\" align='center'> <img src=\"/img/basicYellow.png\" height=\"70px\"/></td>\n                            <td width=\"70%\" align=\"left\">Setup</td>\n                        </tr>\n                    </table>\n                </a>\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 830,
        "y": 260,
        "wires": [
            [
                "c1ea8a4a6c9d59df"
            ]
        ]
    },
    {
        "id": "18e277b4.8fc208",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky Power Relay",
        "output": "str",
        "x": 550,
        "y": 260,
        "wires": [
            [
                "fd81c62c.98f018"
            ]
        ]
    },
    {
        "id": "f328fcb4.91dc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 410,
        "y": 260,
        "wires": [
            [
                "18e277b4.8fc208"
            ]
        ]
    },
    {
        "id": "fd81c62c.98f018",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSwitch.png",
        "output": "str",
        "x": 690,
        "y": 260,
        "wires": [
            [
                "b1885d32.8d9cc"
            ]
        ]
    },
    {
        "id": "f14573da.0a788",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "project",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "project",
        "payload": "PROJECT",
        "payloadType": "env",
        "x": 480,
        "y": 60,
        "wires": [
            [
                "938904a0.58d668"
            ]
        ]
    },
    {
        "id": "938904a0.58d668",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Save global env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 60,
        "wires": []
    },
    {
        "id": "c634a8d3.297848",
        "type": "http in",
        "z": "c4285970.3276d8",
        "name": "/",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 200,
        "wires": [
            [
                "ca68de71.c19fe"
            ]
        ]
    },
    {
        "id": "65a7590b.59a2a8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Body HTML -->\n",
        "output": "str",
        "x": 830,
        "y": 200,
        "wires": [
            [
                "442b832cdc12d085"
            ]
        ]
    },
    {
        "id": "9709fa69.9daac8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "Title",
        "field": "payload.title",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "Blinky Power Relay",
        "output": "str",
        "x": 550,
        "y": 200,
        "wires": [
            [
                "a36869fc.6f5e58"
            ]
        ]
    },
    {
        "id": "ca68de71.c19fe",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "JavaScript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        useWebSockets(false);\n        function onDocumentReady()\n        {\n            window.location = '/apps'\n        }\n        function onWebSocketOpen()\n        {\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n        }\n\n",
        "output": "str",
        "x": 410,
        "y": 200,
        "wires": [
            [
                "9709fa69.9daac8"
            ]
        ]
    },
    {
        "id": "a36869fc.6f5e58",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "navBarIcon",
        "field": "payload.navBarIcon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "yellowSwitch.png",
        "output": "str",
        "x": 690,
        "y": 200,
        "wires": [
            [
                "65a7590b.59a2a8"
            ]
        ]
    },
    {
        "id": "c87aa87d.aef928",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "fdfbcac7.35b388"
            ]
        ]
    },
    {
        "id": "fdfbcac7.35b388",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Init device name",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n};\nflow.set(msg.topic + 'Props',deviceProps);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "af9642ae.0c0da",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Device Names",
        "func": "msg.payload['deviceAName'] = flow.get('deviceAProps').name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 260,
        "wires": [
            [
                "f328fcb4.91dc"
            ]
        ]
    },
    {
        "id": "442b832cdc12d085",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 990,
        "y": 200,
        "wires": []
    },
    {
        "id": "c1ea8a4a6c9d59df",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 990,
        "y": 260,
        "wires": []
    },
    {
        "id": "ba79496e.4e42b8",
        "type": "exec",
        "z": "c4285970.3276d8",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 1100,
        "y": 60,
        "wires": [
            [
                "25a2b2c8.26f4ce"
            ],
            [],
            []
        ]
    },
    {
        "id": "fc7d9351.a3d0a",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 940,
        "y": 60,
        "wires": [
            [
                "ba79496e.4e42b8"
            ]
        ]
    },
    {
        "id": "25a2b2c8.26f4ce",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStartIndex + 15));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStartIndex + 16));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nglobal.set('linkQuality',linkQuality);\nglobal.set('signalLevel', signalLevel);\nglobal.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1280,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "493fb622.d8afc8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.global",
        "field": "payload.script.global",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Global Javascript\n        useWebSockets(true);\n        var blinkyPowerRelayDevice = null;\n        var appDeviceInfo = \n        {\n            config:\n            {\n                deviceType  : '{{{payload.script.deviceType}}}',\n                name        : '{{{payload.script.name}}}',\n                project     : '{{{payload.script.project}}}'\n            },\n            device: null\n        };\n        var archiveRequestList = [];\n        var archiveList = [];\n        var archiveList = [];\n        var pingInterval = 2000;\n        var lastPing = 0;\n\n        var changingState = false;\n        var expertSettingsVisible = true;\n        var nsamplesChanged = false;\n        var nfilterChanged = false;\n        var startScheduleTimeChanged = false;\n        var stopScheduleTimeChanged = false;\n        var startCostSearchTimeChanged = false;\n        var stopCostSearchTimeChanged = false;\n        var costDurationChanged = false;\n\n        function onDocumentReady()\n        {\n            setRemoteApp(false);\n            if (remoteApp)\n            {\n                getCreds();\n                setInterval(function(){getCreds();}, 1000);\n            }\n            else\n            {\n                $('#userCardId').hide();\n            }\n            $('#archiveCardId').hide();\n            setInterval(ping, 1000);\n            $('#nsamplesButtonId').hide();\n            $('#nfilterButtonId').hide();\n            $('#startScheduleTimeButtonId').hide();\n            $('#stopScheduleTimeButtonId').hide();\n            $('#startCostSearchTimeButtonId').hide();\n            $('#stopCostSearchTimeButtonId').hide();\n            $('#costDurationButtonId').hide();\n           \n            $('#startScheduleTimeInputId').timepicker({});\n            $('#stopScheduleTimeInputId').timepicker({});\n            $('#startCostSearchTimeInputId').timepicker({});\n            $('#stopCostSearchTimeInputId').timepicker({});\n            $('#costDurationInputId').timepicker({\"showButtonPanel\":  false,\"showTitlePanel\":  false});\n\n            disableSettings(true);\n\n            $('#expertSettingsCard').hide();\n            expertSettingsVisible = false;\n            $('#expertSettingsButton').text(\"Show\");\n            $('#manualModeCard').hide();\n            $('#scheduleModeCard').hide();\n        }\n        function onWebSocketOpen()\n        {\n            if (remoteApp) getArchive(24);\n        }\n        function onWebSocketClose()\n        {\n            \n        }\n        function onWebSocketMessage(msg)\n        {\n            switch(msg.topic)\n            {\n                case 'readings':\n                    if ((msg.mqttDevice.name == appDeviceInfo.config.name) && (msg.mqttDevice.deviceType == appDeviceInfo.config.deviceType)  && (msg.mqttDevice.project == appDeviceInfo.config.project) )\n                    {\n                        lastPing = new Date().getTime();\n                        heartbeat();\n                        appDeviceInfo.device = JSON.parse(msg.payload);\n                        updateDmaReadings(appDeviceInfo.device);\n                    }\n                    break;\n                case 'readDatabase':\n                    if (msg.userID == userID)\n                    {\n                        if ((msg.payload.device.deviceType == appDeviceInfo.config.deviceType) && (msg.payload.device.name == appDeviceInfo.config.name) )\n                            putArchiveValues(msg.payload);\n                    }\n                    break;\n                case 'renew':\n                    if (msg.userID == userID)\n                    {\n                        updateCookie(msg);\n                    }\n                    break;\n                case 'permissionError':\n                    if (msg.userID == userID)\n                    {\n                        acknowledgeDialog('Permission', 'Error', msg.payload);\n                    }\n                    break;\n                case 'loginExpired':\n                    if (msg.userID == userID)\n                    {\n                       location.reload();\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n        function ping()\n        {\n            {\n                if (appDeviceInfo.device != null)\n                {\n                    if (appDeviceInfo.device.settingInProgress == 1) return;\n                }\n                var now = new Date().getTime();\n                if ((now - lastPing) > pingInterval)\n                {\n                    lastPing = now;\n                    var actionMsg = \n                        {\n                            topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/ping',\n                            payload : true\n                        };\n                    sendActionMsg('ping', 'ping', actionMsg);\n               }\n            }        \n        }\n        function sendSetting(payload)\n        {\n            var actionMsg = \n                {\n                    topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/setting',\n                    payload : payload\n                };\n            sendActionMsg('setting','setting',actionMsg);\n        }\n        function reset(actionFlag)\n        {\n            var headerText = 'Warning';\n            var title = 'Resetting Tray';\n            var text = 'I hope you know what you are doing.';\n            var buttonTexts = ['Reset', 'Cancel'];\n            var buttonFunctions = \n            [\n                function()\n                {\n                    $( this ).dialog( \"close\" );\n                    var actionMsg = \n                        {\n                            topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/reset',\n                            payload : actionFlag\n                        };\n                    sendActionMsg('reset','setting',actionMsg);\n                 }, \n                function()\n                {\n                    $( this ).dialog( \"close\" );\n                }\n            ];\n            if (actionFlag == 2)\n            {\n                title = 'Rebooting Tray';\n                buttonTexts[0] = 'Reboot';\n            }\n            optionDialog(headerText, title, text, buttonTexts, buttonFunctions);\n            \n        }\n",
        "output": "str",
        "x": 670,
        "y": 380,
        "wires": [
            [
                "e29616e2.2e2988"
            ]
        ]
    },
    {
        "id": "d51354fd.a03048",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.editDevice",
        "field": "payload.script.editDevice",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Edit Temp JavaScript\n       $( function() \n        {\n            $( \"#editDeviceDialog\" ).dialog(\n                {\n//                    closeOnEscape: false,\n//                    open: function(event, ui) {$(\".ui-dialog-titlebar-close\", ui.dialog | ui).hide();},\n                    width:    640,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Set\",\n                            click: function() {setDeviceConfig(); $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() \n                            {\n                                $( this ).dialog( \"close\" ); \n                            },\n                            showText: false\n                        }\n                    ]\n                });\n        } );\n        function editDevice(attrName)\n        {\n            $( \"#editDeviceDialog\" ).dialog( \"option\", \"title\", \"Edit\"); \n            editedAttribute = attrName;\n            $( \"#editDeviceDialogAttribute\").html(attrName);\n\n            var attr = appDeviceInfo.device[attrName];\n            $( \"#loloAlarm\").val(attr.alarm.limits.lolo);\n            $( \"#lowAlarm\").val(attr.alarm.limits.low);\n            $( \"#highAlarm\").val(attr.alarm.limits.high);\n            $( \"#hihiAlarm\").val(attr.alarm.limits.hihi);\n            $( \"#notifyName\").val(attr.alarm.notify.name);\n            $( \"#notifyNumber\").val(attr.alarm.notify.number);\n\n            $( \"#editDeviceDialog\" ).dialog( \"open\" );\n        }\n        function setDeviceConfig()\n        {\n            var attr = appDeviceInfo.device[editedAttribute];\n            if (isNaN($('#loloAlarm').val()) \n                || isNaN($('#lowAlarm').val()) \n                || isNaN($('#highAlarm').val()) \n                || isNaN($('#hihiAlarm').val()))\n            {\n                acknowledgeDialog('Error', 'Entry not a number!', editedAttribute);\n                editedAttribute = '';\n                return;\n            }\n            editedAttribute = '';\n\n            attr.alarm.limits.lolo = Number($( \"#loloAlarm\").val());\n            attr.alarm.limits.low = Number($( \"#lowAlarm\").val());\n            attr.alarm.limits.high = Number($( \"#highAlarm\").val());\n            attr.alarm.limits.hihi = Number($( \"#hihiAlarm\").val());\n            attr.alarm.notify.number =  $( \"#notifyNumber\").val();\n            attr.alarm.notify.name = $( \"#notifyName\").val();\n            var actionMsg = \n                {\n                    topic   : appDeviceInfo.config.project + '/' +  appDeviceInfo.config.deviceType + '/' +  appDeviceInfo.config.name + '/setting/config',\n                    payload : appDeviceInfo.device\n                };\n            sendActionMsg('config','setting',actionMsg);\n        }\n",
        "output": "str",
        "x": 680,
        "y": 540,
        "wires": [
            [
                "6f5a5e46.8a941"
            ]
        ]
    },
    {
        "id": "9c813756.6c5c38",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "javascript",
        "field": "payload.javascript",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "{{{payload.script.global}}}\n{{{payload.script.updateReadings}}}\n{{{payload.script.timePlot}}}\n{{{payload.script.archive}}}\n{{{payload.script.editDevice}}}\n{{{payload.script.user}}}\n",
        "output": "str",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "f6ab8485.5f47e8"
            ]
        ]
    },
    {
        "id": "864cffa0.3724b",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "body",
        "field": "payload.body",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div width=\"100%\">\n{{{payload.html.dashboard}}}\n{{{payload.html.opModes}}}\n{{{payload.html.expert}}}\n{{{payload.html.timePlot}}}\n{{{payload.html.archive}}}\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.user}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.wifimon}}}\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12'>\n{{{payload.html.reset}}}\n            </div>\n        </div>\n    </div>",
        "output": "str",
        "x": 970,
        "y": 700,
        "wires": [
            [
                "8aee90afb65f0a8f"
            ]
        ]
    },
    {
        "id": "cefdafa8.91d69",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.wifimon",
        "field": "payload.html.wifimon",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n                <div class='card'>\n                    <p class='card-title'>WiFi Connection</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Device Update</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <img src='/img/heartRed.png' id='heartBeatID' width='100px' height='100px'/>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Signal Level (dBm)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='signalLevelId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Link Quality (/70)</span>\n                                    </td>\n                                    <td width='20%' align='center'></td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='linkQualityId' >-1</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 990,
        "y": 620,
        "wires": [
            [
                "3fb4b4a8.ec76fc"
            ]
        ]
    },
    {
        "id": "7974c464.11ebac",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.archive",
        "field": "payload.html.archive",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Archive HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card' id=archiveCardId>\n                    <p class='card-title'>Archive</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row' >\n                            <table width='100%'>\n                                <tr>\n                                    <td width='10%' align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive2hrButton\" onclick=\"getArchive(2)\" >2</button>\n                                    </td>\n                                    <td width='10%'  align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive4hrButton\" onclick=\"getArchive(4)\" >4</button>\n                                    </td>\n                                    <td width='10%'  align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive8hrButton\" onclick=\"getArchive(8)\" >8</button>\n                                    </td>\n                                    <td width='10%'  align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive24hrButton\" onclick=\"getArchive(24)\" >24</button>\n                                    </td>\n                                    <td width='10%' align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive72hrButton\" onclick=\"getArchive(72)\" >72</button>\n                                    </td>\n                                    <td width='10%' align='center'>\n                                        <button class='btn btn-block big-text' style='background-color:var(--color1);color:var(--color5)' id=\"archive168hrButton\" onclick=\"getArchive(168)\" >168</button>\n                                    </td>\n                                    <td width='10%' align='center'>\n                                        <span class='big-text' >Hours</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                        <div class='row vert-pad'>\n                            <div class='col-md-12'>\n                                <div id=\"archiveChart\" width=\"100%\" ></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 990,
        "y": 540,
        "wires": [
            [
                "4f8cafa.a57065"
            ]
        ]
    },
    {
        "id": "4f8cafa.a57065",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.user",
        "field": "payload.html.user",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='userCardId'>\n                    <div class='card-body' align=\"center\">\n                        <table width=\"100%\">\n                            <tr>\n                                <td  align=\"left\">\n                                     <span class='card-text' style='color:black;'>User:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='usernameId'></span>\n                                </td>\n                            </tr>\n                            <tr>\n                                <td  align=\"left\">\n                                    <span class='card-text' style='color:black;'>Time left:</span>\n                                </td>\n                                <td  align=\"right\">\n                                     <span class='card-text' id='expTimeId'></span>\n                                </td>\n                            </tr>\n                        </table>\n                        <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"renew()\" >Renew</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='logoutButton' onclick=\"logout()\" >Logout</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 980,
        "y": 580,
        "wires": [
            [
                "cefdafa8.91d69"
            ]
        ]
    },
    {
        "id": "6f5a5e46.8a941",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.user",
        "field": "payload.script.user",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        function getCreds()\n        {\n            var now = new Date().getTime();\n            var expDate = Number(getCookie('ExpDate'));\n            if (expDate > 0)\n            {\n                expDate = expDate - now;\n                if(expDate < 0)\n                {\n                    logout();\n                }\n                else\n                {\n                    var hours = Math.floor(expDate / 3600000);\n                    var minutes = expDate - hours * 3600000;\n                    minutes = Math.floor(minutes / 60000);\n                    var seconds = expDate - (hours * 3600000) - (minutes * 60000);\n                    seconds = Math.floor(seconds / 1000);\n                    hours = hours.toString();\n                    if (hours.length == 1) hours = '0' + hours; \n                    minutes = minutes.toString();\n                    if (minutes.length == 1) minutes = '0' + minutes; \n                    seconds = seconds.toString();\n                    if (seconds.length == 1) seconds = '0' + seconds; \n                    var timeString = hours + ':' + minutes + ':' + seconds;\n                    $('#usernameId').text(getCookie('Username'));\n                    $('#expTimeId').text(timeString);\n                }\n            }\n            else\n            {\n                $('#usernameId').text(getCookie('Username'));\n                $('#expTimeId').text('Forever');\n            }\n        }\n        function logout()\n        {\n            document.cookie = project + \"Role= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"ExpDate= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            document.cookie = project + \"Username= ; expires = Thu, 01 Jan 1970 00:00:00 GMT\";\n            window.location.href = \"/\";\n        }\n        function renew()\n        {\n            var actionMsg = {};\n            sendActionMsg('renew', 'renew', actionMsg);\n        }\n        function updateCookie(msg)\n        {\n            document.cookie = project + \"Role=\" + msg.role;\n            document.cookie = project + \"ExpDate=\" + msg.expDate;\n            document.cookie = project + \"Username=\" + msg.username;\n        }\n        function downloadToken()\n        {\n            downloadString(getCookie(\"Role\"), \"text/plain\", project + \"-token.txt\");\n        }\n// from https://gist.github.com/danallison/3ec9d5314788b337b682\n        function downloadString(text, fileType, fileName) \n        {\n            var blob = new Blob([text], { type: fileType });\n            \n            var a = document.createElement('a');\n            a.download = fileName;\n            a.href = URL.createObjectURL(blob);\n            a.dataset.downloadurl = [fileType, a.download, a.href].join(':');\n            a.style.display = \"none\";\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            setTimeout(function() { URL.revokeObjectURL(a.href); }, 1500);\n        }",
        "output": "str",
        "x": 670,
        "y": 580,
        "wires": [
            [
                "9c813756.6c5c38"
            ]
        ]
    },
    {
        "id": "3fb4b4a8.ec76fc",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.reset",
        "field": "payload.html.reset",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "                <div class='card' id='reset'>\n                    <div class='card-body' align=\"center\">\n                         <table width=\"100%\">\n                            <tr>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='resetButton' onclick=\"reset(1)\" >Reset</button>\n                                </td>\n                                <td width=\"10%\"></td>\n                                <td width=\"40%\">\n                                    <button class='btn btn-block card-button big-text' id='rebootButton'onclick=\"reset(2)\" >Reboot</button>\n                                </td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n",
        "output": "str",
        "x": 980,
        "y": 660,
        "wires": [
            [
                "864cffa0.3724b"
            ]
        ]
    },
    {
        "id": "f6ab8485.5f47e8",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.dashboard",
        "field": "payload.html.dashboard",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <p class='card-title'>Dashboard</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Power (W)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                    </td>\n                                    <td width='20%'>\n                                        <span class='card-text'  id='powerId' >-100</span>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Relay State</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                    </td>\n                                    <td width='20%'>\n                                        <span class='card-text'  id='relayStateId' >?</span>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                        <div class='row'>\n                            <table width='100%'>\n                                <tr>\n                                    <td></td>\n                                    <td style='padding-top:35px;' ><button class='btn btn-block big-text' id=\"manualStateButton\" onclick=\"changeOpState(0)\">Manual Mode</button></td>\n                                    <td></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td style='padding-top:35px;' ><button class='btn btn-block big-text' id=\"scheduleStateButton\" onclick=\"changeOpState(1)\">Schedule Mode</button></td>\n                                    <td></td>\n                                </tr>\n                                <tr>\n                                    <td></td>\n                                    <td style='padding-top:35px;' ><button class='btn btn-block big-text' id=\"costStateButton\" onclick=\"changeOpState(2)\">Cost Mode</button></td>\n                                    <td></td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n                <div id=\"editDeviceDialog\" title=\"Edit Device\" class='card'>\n                    <p class='card-title' id='editDeviceDialogAttribute'>Attribute</p>\n                    <div class='card-body'>\n                        <table>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LoLo</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"loloAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">LOW</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"lowAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HIGH</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"highAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">HiHi</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"hihiAlarm\" type=\"text\" value=\"0\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Name</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyName\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                            <tr>\n                                <td width=\"70%\" align=\"left\">  <span class=\"tableHeading tableText\">Notify Number</span></td>\n                                <td width=\"30%\" align=\"right\"><input class=\"form-control tableText\" id=\"notifyNumber\" type=\"text\" value=\"\" /></td>\n                            </tr>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 1000,
        "y": 380,
        "wires": [
            [
                "0ca81e2717a6249c"
            ]
        ]
    },
    {
        "id": "e29616e2.2e2988",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.updateReadings",
        "field": "payload.script.updateReadings",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Update Readings Javascript\n        function updateDmaReadings()\n        {\n            if (appDeviceInfo.device.settingInProgress == 0)\n            {\n                disableSettings(false);\n            }\n            else\n            {\n                disableSettings(true);\n            }\n            $('#linkQualityId').text(appDeviceInfo.device.linkQuality.value);\n            $('#signalLevelId').text(appDeviceInfo.device.signalLevel.value);\n            $('#currentId').text(appDeviceInfo.device.current.value);\n            $('#powerId').text(appDeviceInfo.device.power.value);\n            $('#powerExpertId').text(appDeviceInfo.device.power.value);\n            $('#adcSampleRateId').text(appDeviceInfo.device.adcSampleRate.value);\n            $('#timezoneId').text(appDeviceInfo.device.timezone.value);\n            $('#timezoneCostId').text(appDeviceInfo.device.timezone.value);\n            \n            var startCostTime = new Date(appDeviceInfo.device.startCostTime.value).toLocaleString('en-SE',{year: 'numeric', month: '2-digit', day : '2-digit', hour12:false, hour: '2-digit', minute: '2-digit'}).replace(',', '');\n            var stopCostTime  = new Date(appDeviceInfo.device.stopCostTime.value).toLocaleString('en-SE',{year: 'numeric', month: '2-digit', day : '2-digit', hour12:false, hour: '2-digit', minute: '2-digit'}).replace(',', '');\n            $('#startCostTimeId').text(startCostTime);\n            $('#stopCostTimeId').text(stopCostTime);\n            \n            $('#avgDurationCostId').text(appDeviceInfo.device.avgDurationCost.value.toString());\n            var nextDayCostAvailable = \"Available\" ;\n            if (appDeviceInfo.device.nextDayCostAvailable.value == 0) nextDayCostAvailable = \"Not Available\";\n            $('#nextDayCostAvailableId').text(nextDayCostAvailable);\n            \n            \n            if (!nsamplesChanged)$('#nsamplesInputId').val(appDeviceInfo.device.nsamples.value);\n            if (!nfilterChanged)$('#nfilterInputId').val(appDeviceInfo.device.nfilter.value);\n            if (!startScheduleTimeChanged) $('#startScheduleTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.startScheduleTime.value));\n            if (!stopScheduleTimeChanged) $('#stopScheduleTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.stopScheduleTime.value));\n            if (!startCostSearchTimeChanged) $('#startCostSearchTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.startCostSearchTime.value));\n            if (!stopCostSearchTimeChanged) $('#stopCostSearchTimeInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.stopCostSearchTime.value));\n            if (!costDurationChanged)$('#costDurationInputId').val(minutesAfterMidnightToTimeString(appDeviceInfo.device.costDuration.value));\n\n            var buttonColor = '#00ff00';\n            var buttonTextColor = '#000000';\n            var buttonText = \"Off\";\n            var relayStateTextColor = \"white\";\n            if (appDeviceInfo.device.powerOn.value > 0) \n            {\n                buttonColor = '#ff0000';\n                buttonText = 'On';\n                relayStateTextColor = buttonColor;\n            }\n            $('#relayStateId').css('color', relayStateTextColor);\n            $('#relayStateId').text(buttonText);\n            $('#powerOnButtonId').css('color', buttonTextColor); \n            $('#powerOnButtonId').css('background-color', buttonColor); \n            $('#powerOnButtonId').text(buttonText); \n\n            if (!changingState)\n            {\n                switch(appDeviceInfo.device.opState.value) \n                {\n                  case 0:\n                    $('#manualStateButton').css(\"background-color\", \"green\");\n                    $('#scheduleStateButton').css(\"background-color\", \"white\");\n                    $('#costStateButton').css(\"background-color\", \"white\");\n                    $('#manualModeCard').show();\n                    $('#scheduleModeCard').hide();\n                    $('#costModeCard').hide();\n                    break;\n                  case 1:\n                    // code block\n                    $('#manualStateButton').css(\"background-color\", \"white\");\n                    $('#scheduleStateButton').css(\"background-color\", \"green\");\n                    $('#costStateButton').css(\"background-color\", \"white\");\n                    $('#manualModeCard').hide();\n                    $('#scheduleModeCard').show();\n                    $('#costModeCard').hide();\n                    break;\n                  case 2:\n                    // code block\n                    $('#manualStateButton').css(\"background-color\", \"white\");\n                    $('#scheduleStateButton').css(\"background-color\", \"white\");\n                    $('#costStateButton').css(\"background-color\", \"green\");\n                    $('#manualModeCard').hide();\n                    $('#scheduleModeCard').hide();\n                    $('#costModeCard').show();\n                    break;\n                  default:\n                    // code block\n                    $('#manualStateButton').css(\"background-color\", \"grey\");\n                    $('#scheduleStateButton').css(\"background-color\", \"grey\");\n                    $('#costStateButton').css(\"background-color\", \"grey\");\n                    $('#manualModeCard').hide();\n                    $('#scheduleModeCard').hide();\n                    $('#costModeCard').hide();\n                }            \n                \n            }\n            addTracePointsToTimePlot([appDeviceInfo.device.power.value,appDeviceInfo.device.powerOn.value]);\n\n        }\n        function minutesAfterMidnightToTimeString(minutesAfterMidnight)\n        {\n            var hours = Math.floor(minutesAfterMidnight / 60);\n            var minutes = minutesAfterMidnight - (hours * 60);\n            var hourText = hours.toString();\n            if (hours < 10) hourText = '0' + hourText;\n            var minuteText = minutes.toString();\n            if (minutes < 10) minuteText = '0' + minuteText;\n            return hourText + \":\" + minuteText;\n        }\n        function timeStringToMinutesAfterMidnight(timeString)\n        {\n            var startTimeArray = timeString.split(':');\n            return Number(startTimeArray[0]) * 60 + Number(startTimeArray[1]);\n         }\n        function disableSettings(disable)\n        {\n            $('#nfilterInputId').attr('disabled',disable);\n            $('#nsamplesInputId').attr('disabled',disable);\n            $('#startScheduleTimeInputId').attr('disabled',disable);\n            $('#powerOnButtonId').attr('disabled',disable);\n            $('#manualStateButton').attr('disabled',disable);\n            $('#scheduleStateButton').attr('disabled',disable);\n            $('#costStateButton').attr('disabled',disable);\n\n            $('#resetButton').attr('disabled',disable);\n            $('#rebootButton').attr('disabled',disable);\n\n        }\n        function powerOn()\n        {\n            if (appDeviceInfo.device.powerOn.value > 0)\n            {\n                appDeviceInfo.device.powerOn.value = 0;\n            }\n            else\n            {\n                appDeviceInfo.device.powerOn.value = 1;\n                \n            }\n            $('#ledOnButtonId').css('color', 'black'); \n            $('#ledOnButtonId').css('background-color', 'grey'); \n            $('#ledOnButtonId').text('?'); \n            var payload = {'attr': 'powerOn', 'value':appDeviceInfo.device.powerOn.value};\n            sendSetting(payload);\n        }\n        function nsamplesChange()\n        {\n            nsamplesChanged = true;\n            $('#nsamplesButtonId').show();\n        }\n        function nfilterChange()\n        {\n            nfilterChanged = true;\n            $('#nfilterButtonId').show();\n        }\n        function startScheduleTimeChange()\n        {\n            startScheduleTimeChanged = true;\n            $('#startScheduleTimeButtonId').show();\n        }\n        function stopScheduleTimeChange()\n        {\n            stopScheduleTimeChanged = true;\n            $('#stopScheduleTimeButtonId').show();\n        }\n        function startCostSearchTimeChange()\n        {\n            startCostSearchTimeChanged = true;\n            $('#startCostSearchTimeButtonId').show();\n        }\n        function stopCostSearchTimeChange()\n        {\n            stopCostSearchTimeChanged = true;\n            $('#stopCostSearchTimeButtonId').show();\n        }\n         function costDurationChange()\n        {\n            costDurationChanged = true;\n            $('#costDurationButtonId').show();\n        }\n        function nsamples()\n        {\n            $('#nsamplesButtonId').hide();\n            if (isNaN($('#nsamplesInputId').val()))\n            {\n                nsamplesChanged = false;\n                return;\n            }\n            var payload = {'attr': 'nsamples', 'value':Number($('#nsamplesInputId').val())};\n            sendSetting(payload);\n            nsamplesChanged = false;\n        }\n        function nfilter()\n        {\n            $('#nfilterButtonId').hide();\n            if (isNaN($('#nfilterInputId').val()))\n            {\n                nfilterChanged = false;\n                return;\n            }\n            var payload = {'attr': 'nfilter', 'value':Number($('#nfilterInputId').val())};\n            sendSetting(payload);\n            nfilterChanged = false;\n        }\n        function startScheduleTime()\n        {\n            $('#startScheduleTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#startScheduleTimeInputId').val());\n            var payload = {'attr': 'startScheduleTime', 'value':minutes};\n            sendSetting(payload);\n            startScheduleTimeChanged = false;\n        }\n        function stopScheduleTime()\n        {\n            $('#stopScheduleTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#stopScheduleTimeInputId').val());\n            var payload = {'attr': 'stopScheduleTime', 'value':minutes};\n            sendSetting(payload);\n            stopScheduleTimeChanged = false;\n        }\n        function startCostSearchTime()\n        {\n            $('#startCostSearchTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#startCostSearchTimeInputId').val());\n            var payload = {'attr': 'startCostSearchTime', 'value':minutes};\n            sendSetting(payload);\n            startCostSearchTimeChanged = false;\n        }\n        function stopCostSearchTime()\n        {\n            $('#stopCostSearchTimeButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#stopCostSearchTimeInputId').val());\n            var payload = {'attr': 'stopCostSearchTime', 'value':minutes};\n            sendSetting(payload);\n            stopCostSearchTimeChanged = false;\n        }\n        function costDuration()\n        {\n            $('#costDurationButtonId').hide();\n            var minutes = timeStringToMinutesAfterMidnight($('#costDurationInputId').val());\n            var payload = {'attr': 'costDuration', 'value':minutes};\n            sendSetting(payload);\n            costDurationChanged = false;\n        }\n        function expertSettings()\n        {\n            if (expertSettingsVisible)\n            {\n                $('#expertSettingsCard').hide();\n                $('#expertSettingsButton').text('Show');\n                expertSettingsVisible = false;\n            }\n            else\n            {\n                $('#expertSettingsCard').show();\n                $('#expertSettingsButton').text('Hide');\n                expertSettingsVisible = true;\n            }\n        }\n        function changeOpState(state)\n        {\n            var payload = {'attr': 'opState', 'value':state};\n            sendSetting(payload);\n        }\n ",
        "output": "str",
        "x": 700,
        "y": 420,
        "wires": [
            [
                "ea72affbdba78c7b"
            ]
        ]
    },
    {
        "id": "8a2cca551d64f879",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.archive",
        "field": "payload.script.archive",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Archive JavaScript\n        function getArchive(hours)\n        { \n            $('#archiveCardId').show();\n\n//            if (hours > 2) messageDialog('Info', 'Wait', 'Getting Archive Data');\n            $('#archive2hrButton').attr(\"disabled\", true); \n            $('#archive4hrButton').attr(\"disabled\", true); \n            $('#archive8hrButton').attr(\"disabled\", true); \n            $('#archive24hrButton').attr(\"disabled\", true); \n            $('#archive72hrButton').attr(\"disabled\", true); \n            $('#archive168hrButton').attr(\"disabled\", true); \n            $('#archive2hrButton').css('color', 'var(--color5)'); \n            $('#archive2hrButton').css('background-color', 'var(--color1)'); \n            $('#archive4hrButton').css('color', 'var(--color5)'); \n            $('#archive4hrButton').css('background-color', 'var(--color1)'); \n            $('#archive8hrButton').css('color', 'var(--color5)'); \n            $('#archive8hrButton').css('background-color', 'var(--color1)'); \n            $('#archive24hrButton').css('color', 'var(--color5)'); \n            $('#archive24hrButton').css('background-color', 'var(--color1)'); \n            $('#archive72hrButton').css('color', 'var(--color5)'); \n            $('#archive72hrButton').css('background-color', 'var(--color1)'); \n            $('#archive168hrButton').css('color', 'var(--color5)'); \n            $('#archive168hrButton').css('background-color', 'var(--color1)'); \n            switch(hours)\n            {\n                case 2:\n                    $('#archive2hrButton').css('color', 'var(--color1)'); \n                    $('#archive2hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 4:\n                    $('#archive4hrButton').css('color', 'var(--color1)'); \n                    $('#archive4hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 8:\n                    $('#archive8hrButton').css('color', 'var(--color1)'); \n                    $('#archive8hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 24:\n                    $('#archive24hrButton').css('color', 'var(--color1)'); \n                    $('#archive24hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 72:\n                    $('#archive72hrButton').css('color', 'var(--color1)'); \n                    $('#archive72hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                case 168:\n                    $('#archive168hrButton').css('color', 'var(--color1)'); \n                    $('#archive168hrButton').css('background-color', 'var(--color5)'); \n                    break;\n                default:\n                // code block\n            }\n\n            archiveRequestList = [];\n            archiveList = [];\n            var stopDate = new Date().getTime();\n            var startDate = stopDate - hours * 3600000;\n            archiveRequestList[0] = \n            {\n                deviceType : appDeviceInfo.config.deviceType,\n                name : appDeviceInfo.config.name, \n                attr : ['power','powerOn'],\n                startDate: startDate, \n                stopDate: stopDate,\n            };\n            getArchiveValues();\n\n        }\n        function getArchiveValues()\n        {\n            var actionMsg = \n                {\n                    device      : archiveRequestList[0]\n                };\n            sendActionMsg('readDatabase','readDatabase', actionMsg);\n            archiveRequestList.shift();\n            return;\n        }\n        function putArchiveValues(data)\n        {\n            archiveList.push(data);\n            if (archiveRequestList.length > 0)\n            {\n                getArchiveValues();\n            }\n            else\n            {\n                plotArchive();\n            }\n        }\n\n        function plotArchive()\n        {\n//            $( \"#messageDialog\" ).dialog( \"close\" );\n            var layout =\n            {\n                showlegend  : true,\n                legend      : { x: 0, y: 1.15},\n                height      : '500',\n                width       : '',\n                xaxis       :\n                {\n//                    title: 'Hours since ' + new Date(archiveList[0].device.stopDate).toLocaleString(),\n                    type: 'date'\n                },\n                yaxis:\n                {\n                    title           : 'Power (W)',\n                    titlefont       : {color: '#557a95'},\n                    tickfont        : {color: '#557a95'},\n                    gridcolor       : '#beceda',\n                    zerolinecolor   : '#beceda',\n                    linecolor       : '#beceda',\n                    range: [0, 1000],\n                    dtick: 250\n    //                rangemode       : 'tozero'\n                },\n    \n                yaxis2:\n                {\n                    title           : 'Relay',\n                    titlefont       : {color: '#f2a31f'},\n                    tickfont        : {color: '#f2a31f'},\n                    gridcolor       : '#f2a31f',\n                    zerolinecolor   : '#f2a31f',\n                    linecolor       : '#f2a31f',\n                    overlaying: 'y',\n                    side: 'right',\n                    range: [0, 2],\n                    dtick: 1\n                },\n                margin: \n                    {\n                        t: 30, //top margin\n    //                    l: 0, //left margin\n    //                    r: 0, //right margin\n    //                    b: 20 //bottom margin\n                    },\n            };\n            var trace1 = \n            {\n                x: [],\n                y: [],\n                name: 'Power',\n                yaxis: 'y1',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'blue'}\n        \n            };\n            var trace2 = \n            {\n                x: [],\n                y: [],\n                name: 'Relay State',\n                yaxis: 'y2',\n                type: 'scatter',\n                mode: 'lines',\n                line: {color: 'red'}\n        \n            };\n            for (var ii = 0; ii < archiveList[0].trace.length; ++ii)\n            {\n//                var x = (archiveList[0].trace[ii].timeStamp - archiveList[0].device.stopDate) / 3600000.0;\n                var x = archiveList[0].trace[ii].timeStamp;\n                trace1.x[ii] = x;\n                trace1.y[ii] = archiveList[0].trace[ii][archiveList[0].device.attr[0]] ;\n                trace2.x[ii] = x;\n                trace2.y[ii] = archiveList[0].trace[ii][archiveList[0].device.attr[1]] ;\n             }\n\n\n            Plotly.newPlot('archiveChart', [trace1,trace2], layout);\n            $('#archive2hrButton').attr(\"disabled\", false); \n            $('#archive4hrButton').attr(\"disabled\", false); \n            $('#archive8hrButton').attr(\"disabled\", false); \n            $('#archive24hrButton').attr(\"disabled\", false); \n            $('#archive72hrButton').attr(\"disabled\", false); \n            $('#archive168hrButton').attr(\"disabled\", false); \n        }\n",
        "output": "str",
        "x": 670,
        "y": 500,
        "wires": [
            [
                "d51354fd.a03048"
            ]
        ]
    },
    {
        "id": "9caafb0f1f33ec3d",
        "type": "subflow:8341090a.df9758",
        "z": "c4285970.3276d8",
        "name": "",
        "x": 1310,
        "y": 700,
        "wires": []
    },
    {
        "id": "ea72affbdba78c7b",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "script.timePlot",
        "field": "payload.script.timePlot",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "// Archive JavaScript\n        var timePlotLength = 600000;\n        var timePlotLayout =\n        {\n            showlegend  : true,\n            legend      : { x: 0, y: 1.15},\n            height      : '500',\n            width       : '',\n            xaxis       :\n            {\n                type: 'date'\n            },\n            yaxis:\n            {\n                title           : 'Power (W)',\n                titlefont       : {color: '#557a95'},\n                tickfont        : {color: '#557a95'},\n                gridcolor       : '#beceda',\n                zerolinecolor   : '#beceda',\n                linecolor       : '#beceda',\n//                range: [0, 1000],\n//                dtick: 250\n//                rangemode       : 'tozero'\n            },\n\n            yaxis2:\n            {\n                title           : 'Relay',\n                titlefont       : {color: '#f2a31f'},\n                tickfont        : {color: '#f2a31f'},\n                gridcolor       : '#f2a31f',\n                zerolinecolor   : '#f2a31f',\n                linecolor       : '#f2a31f',\n                overlaying: 'y',\n                side: 'right',\n                range: [0, 2],\n                dtick: 1\n            },\n\n            margin: \n                {\n                    t: 30, //top margin\n//                    l: 0, //left margin\n//                    r: 0, //right margin\n//                    b: 20 //bottom margin\n                },\n        };\n        var timePlotTraces = [];\n        timePlotTraces[0] = \n        {\n            x: [],\n            y: [],\n            name: 'Power',\n            yaxis: 'y1',\n            type: 'scatter',\n            mode: 'lines',\n            line: {color: 'blue'}\n    \n        };\n        timePlotTraces[1] = \n        {\n            x: [],\n            y: [],\n            name: 'Relay State',\n            yaxis: 'y2',\n            type: 'scatter',\n            mode: 'lines',\n            line: {color: 'red'}\n    \n        };\n        function addTracePointsToTimePlot(pts)\n        {\n            var now = new Date().getTime();\n            var plotBeginning = now - timePlotLength;\n            var removeDone = false;\n            while(!removeDone)\n            {\n                if (timePlotTraces[0].x[0] < plotBeginning)\n                {\n                    for (var ii = 0; ii < timePlotTraces.length; ++ii)\n                    {\n                        timePlotTraces[ii].x.shift();\n                        timePlotTraces[ii].y.shift();\n                    }\n                }\n                else\n                {\n                    removeDone = true;\n                }\n            }\n            for (var ii = 0; ii < timePlotTraces.length; ++ii)\n            {\n                timePlotTraces[ii].x.push(now);\n                timePlotTraces[ii].y.push(pts[ii]);\n            }    \n            Plotly.newPlot(\"timePlotChart\", timePlotTraces, timePlotLayout);\n        }\n\n",
        "output": "str",
        "x": 680,
        "y": 460,
        "wires": [
            [
                "8a2cca551d64f879"
            ]
        ]
    },
    {
        "id": "64b8974a8d469849",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.timePlot",
        "field": "payload.html.timePlot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <p class='card-title'>Time Plot</p>\n                    <div class='card-body' align=\"center\">\n                        <div id=\"timePlotChart\" width=\"100%\" ></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 990,
        "y": 500,
        "wires": [
            [
                "7974c464.11ebac"
            ]
        ]
    },
    {
        "id": "0ca81e2717a6249c",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.opModes",
        "field": "payload.html.opModes",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;' id=\"manualModeCard\">\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='card-body' align=\"center\" id=\"manualModeCardBody\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                 <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Power On/Off</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block big-text' style='background-color:grey;color:black' id='powerOnButtonId' onclick=\"powerOn()\" >?</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;' id=\"scheduleModeCard\">\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='card-body' align=\"center\" id=\"scheduleModeCardBody\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Time zone</span>\n                                    </td>\n                                    <td width='40%' align='left'>\n                                        <span class='card-text'  id='timezoneId' >?</span>\n                                    </td>\n                                    <td width='20%' align='right'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Start Time</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"startScheduleTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"startScheduleTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"startScheduleTimeButtonId\" onclick=\"startScheduleTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Stop Time</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"stopScheduleTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"stopScheduleTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"stopScheduleTimeButtonId\" onclick=\"stopScheduleTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n        <div class='row' style='padding-bottom: 25px;' id=\"costModeCard\">\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='card-body' align=\"center\" id=\"costModeCardBody\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                 <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Time zone</span>\n                                    </td>\n                                    <td width='40%' align='left'>\n                                        <span class='card-text'  id='timezoneCostId' >?</span>\n                                    </td>\n                                    <td width='20%' align='right'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Start Search</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"startCostSearchTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"startCostSearchTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"startCostSearchTimeButtonId\" onclick=\"startCostSearchTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Stop Search</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"stopCostSearchTimeInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"stopCostSearchTimeChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"stopCostSearchTimeButtonId\" onclick=\"stopCostSearchTime()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Duration</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <input id=\"costDurationInputId\" type=\"text\" value=\"0\" class=\"big-text\" size=\"5\" onclick=\"costDurationChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"costDurationButtonId\" onclick=\"costDuration()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Relay On</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='startCostTimeId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Relay Off</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='stopCostTimeId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Avg. Rate (SEK/kW-hr)</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='avgDurationCostId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('avgDurationCost')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='40%'>\n                                        <span class='card-text' >Next Day Cost Profile</span>\n                                    </td>\n                                    <td width='40%'>\n                                        <span class='card-text'  id='nextDayCostAvailableId' >?</span>\n                                    </td>\n                                    <td width='20%'>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 1000,
        "y": 420,
        "wires": [
            [
                "65433ddfa7ef28b2"
            ]
        ]
    },
    {
        "id": "65433ddfa7ef28b2",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "html.expert",
        "field": "payload.html.expert",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- Dashboard HTML -->\n        <div class='row' style='padding-bottom: 25px;'>\n            <div class='col-md-12' align='center'>\n                <div class='card'>\n                    <div class='row'>\n                        <div class='col-md-2'>\n                        </div>\n                        <div class='col-md-8'>\n                            <p class='card-title'>Expert Settings</p>\n                         </div>\n                        <div class='col-md-2'>\n                            <button class='btn btn-block card-button big-text' id=\"expertSettingsButton\" onclick=\"expertSettings()\" >Hide</button>\n                        </div>\n                    </div>\n                    <div class='card-body' id=\"expertSettingsCard\" align=\"center\">\n                        <div class='row' style='padding-bottom: 25px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Power (W)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text'  id='powerExpertId' >-100</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('power')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Current (A)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text'  id='currentId' >-100</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('current')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Sample Rate (kHz)</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text'  id='adcSampleRateId' >-100</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' onclick=\"editDevice('adcSampleRate')\" >Edit</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%'>\n                                        <span class='card-text' >Average Samples</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <input id=\"nsamplesInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"nsamplesChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"nsamplesButtonId\" onclick=\"nsamples()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td width='60%'>\n                                        <span class='card-text' >Line Filter Samples</span>\n                                    </td>\n                                    <td width='20%'>\n                                        <input id=\"nfilterInputId\" type=\"text\" value=\"0\" class=\"big-text\"  size=\"8\" oninput=\"nfilterChange()\"/>\n                                    </td>\n                                    <td width='20%'>\n                                        <button class='btn btn-block card-button big-text' id=\"nfilterButtonId\" onclick=\"nfilter()\" >&#10003;</button>\n                                    </td>\n                                </tr>\n                            </table>\n                        </div>\n                   </div>\n                </div>\n            </div>\n        </div>\n",
        "output": "str",
        "x": 990,
        "y": 460,
        "wires": [
            [
                "64b8974a8d469849"
            ]
        ]
    },
    {
        "id": "8aee90afb65f0a8f",
        "type": "template",
        "z": "c4285970.3276d8",
        "name": "extraCss",
        "field": "payload.extraCss",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        .ui-widget { font-size: 1.5em !important; }",
        "output": "str",
        "x": 1120,
        "y": 700,
        "wires": [
            [
                "9caafb0f1f33ec3d"
            ]
        ]
    }
]