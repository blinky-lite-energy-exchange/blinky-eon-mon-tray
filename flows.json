[
    {
        "id": "16343784c71a3679",
        "type": "tab",
        "label": "blinky-eon-mon-tray",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c4285970.3276d8",
        "type": "tab",
        "label": "web-app",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2c5d25cb.3428ca",
        "type": "subflow",
        "name": "App NavBar",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "c104210d.418eb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ca529822.9112f8",
        "type": "subflow",
        "name": "HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "99bb1519.85fc18"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "e3c68b88.d82258",
        "type": "subflow",
        "name": "App CSS",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "f5a9eda8.5c5bc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "8341090a.df9758",
        "type": "subflow",
        "name": "App HTML",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "966e270e.701e48"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "b0590efd9327f119",
        "type": "subflow",
        "name": "Check Setting",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "96257109c2d49ab2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 300,
                "y": 80,
                "wires": [
                    {
                        "id": "96257109c2d49ab2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "52dab9565680d881",
        "type": "subflow",
        "name": "Create Readings",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "412820e266410a18"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 60,
                "wires": [
                    {
                        "id": "412820e266410a18",
                        "port": 0
                    }
                ]
            },
            {
                "x": 400,
                "y": 120,
                "wires": [
                    {
                        "id": "412820e266410a18",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "4bc85721459d7e16",
        "type": "subflow",
        "name": "Create Setting",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "087714ee84e23b57"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 40,
                "wires": [
                    {
                        "id": "087714ee84e23b57",
                        "port": 0
                    }
                ]
            },
            {
                "x": 360,
                "y": 100,
                "wires": [
                    {
                        "id": "087714ee84e23b57",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 160,
                "wires": [
                    {
                        "id": "087714ee84e23b57",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "e17c93fc0f5cec42",
        "type": "subflow",
        "name": "Init Cube",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "79cd6887f7e9ed8e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "79cd6887f7e9ed8e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "node-red/status.svg"
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "cf9f84d0.6fba78",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "44b51478.9c022c",
        "type": "websocket-listener",
        "path": "/blinky-power-relay/websocket",
        "wholemsg": "false"
    },
    {
        "id": "4381096bc94740bd",
        "type": "serial-port",
        "serialport": "$(SERIALPORT)",
        "serialbaud": "19200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "$(SERIALBUFSIZE)",
        "bin": "bin",
        "out": "count",
        "addchar": "",
        "responsetimeout": "2000"
    },
    {
        "id": "c104210d.418eb",
        "type": "template",
        "z": "2c5d25cb.3428ca",
        "name": "navBar",
        "field": "payload.navBar",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- navBar -->\n    <div class=\"jumbotron\" width=\"100%\">\n        <table width=\"100%\">\n            <tr>\n                <td style=\"text-align:left; vertical-align:middle;\"  width=\"20%\">\n                    <img src=\"/img/bl-mc-icon-inverse.png\" height=\"75px\"/>\n                </td>\n                <td width=\"60%\" style=\"text-align:center; vertical-align:middle;\">\n                    <h1 class=\"jumbotron-title big-text bold-text\">\n                        <img src=\"/img/{{{payload.navBarIcon}}}\" height=\"75px\" style=\"padding-right:20px;\"/><span>{{{payload.title}}}</span>\n                    </h1>\n                </td>\n                <td style=\"text-align:right; vertical-align:middle;\" width=\"20%\">\n                    <a href='/apps'><img src=\"/img/appsYellow.png\" height=\"75px\"/></a>\n                </td>\n            </tr>\n        </table>\n    </div>",
        "output": "str",
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "b9df3f26.ab53f",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n{{{payload.head}}}\n  </head>\n  <body>\n{{{payload.navBar}}}\n{{{payload.html.websocket}}}\n{{{payload.body}}}\n{{{payload.foot}}}\n  </body>\n</html>",
        "output": "str",
        "x": 1150,
        "y": 40,
        "wires": [
            [
                "d1d9e12b.926ff"
            ]
        ]
    },
    {
        "id": "895ba39c.86e59",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Foot",
        "field": "payload.foot",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <div id=\"acknowledgeDialog\" title=\"Acknowledge\" class='card'>\n        <p class='card-title' id='acknowledgeDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='acknowledgeDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"optionDialog\" title=\"Option\" class='card'>\n        <p class='card-title' id='optionDialogTitle'>Choice</p>\n        <div class='card-body'>\n            <p class='tableText' id='optionDialogText'>Text</p>\n        </div>\n    </div>\n    <div id=\"messageDialog\" title=\"Message\" class='card'>\n        <p class='card-title' id='messageDialogTitle'>Warning</p>\n        <div class='card-body'>\n            <p class='tableText' id='messageDialogText'>Text</p>\n        </div>\n    </div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>",
        "output": "str",
        "x": 690,
        "y": 40,
        "wires": [
            [
                "a9a62959.7c01e8"
            ]
        ]
    },
    {
        "id": "aa17ff35.7cdfd",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Head",
        "field": "payload.head",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "    <meta charset=\"UTF-8\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=4\" type=\"image/x-icon\"/>\n    <title>{{payload.title}}</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui.css\"/>\n    <link rel=\"stylesheet\" href=\"/jquery/jquery-ui-timepicker-addon.css\"/>\n    <script src=\"/jquery/jquery.js\"></script>\n    <script src=\"/jquery/jquery-ui.js\"></script>\n    <script src=\"/jquery/jquery-ui-timepicker-addon.js\"></script>\n    <script src=\"/scripts/plotly-latest.min.js\"></script>\n{{{payload.extraScripts}}}\n    <style>\n{{{payload.css}}}\n    </style>\n    <style>\n{{{payload.extraCss}}}\n    </style>\n    <script>\n{{{payload.utilityScripts}}}\n    </script>\n    <script>\n{{{payload.javascript}}}\n    </script>",
        "output": "str",
        "x": 570,
        "y": 40,
        "wires": [
            [
                "895ba39c.86e59"
            ]
        ]
    },
    {
        "id": "d1d9e12b.926ff",
        "type": "http response",
        "z": "ca529822.9112f8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1270,
        "y": 40,
        "wires": []
    },
    {
        "id": "c4ed2505.8c07e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "Utility Scripts",
        "field": "payload.utilityScripts",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "        var remoteApp = true;\n        var ws;\n        var userID = -1;\n        var useWebSocketsFlag = true;\n        var project = '{{{payload.project}}}';\n        var heartBeatImage = false;\n        var wsUri = '';\n        var wsConnected = false;\n\n        function setRemoteApp(remoteAppSet)\n        {\n            remoteApp  = remoteAppSet;\n        }\n        function webSocketConnected()\n        {\n            return wsConnected;\n        }\n        function useWebSockets(webSocketsFlag)\n        {\n            useWebSocketsFlag = webSocketsFlag;\n        }\n        function wsConnectC()\n        {\n            if (!useWebSocketsFlag)\n            {\n                return;\n            }\n            if (wsUri.length < 1)\n            {\n                var uri = window.location.href.split('://');\n                var wslead = 'ws://';\n                if (uri[0] == 'https') wslead = 'wss://';\n                var questionLocation = uri[1].indexOf('?');\n                if (questionLocation >= 0)\n                {\n                    uri[1] = uri[1].substring(0,questionLocation);\n//                    console.log(uri[1]);\n                }\n                if (uri[1].indexOf('/') < (uri[1].length - 1))\n                {\n                    wsUri = wslead + uri[1] + '/websocket';\n                }\n                else\n                {\n                    wsUri = wslead + uri[1] + 'websocket';\n                }\n            }\n            ws = new WebSocket(wsUri);\n            ws.onmessage = function(event)\n            {\n                onWebSocketMessage(JSON.parse(event.data));\n        \n            };\n            ws.onopen = function()\n            {\n                console.log(\"Websocket connected\");\n                wsConnected = true;\n                $('#webSocketStatus').html('Open');\n                $('#reOpenWebSocketButton').hide();\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n                onWebSocketOpen();\n            };\n            ws.onclose = function()\n            {\n                console.log(\"Websocket closed\");\n                wsConnected = false;\n                $('#webSocketStatus').html('Closed');\n                $('#reOpenWebSocketButton').show();\n                $('#webSocketStatusCard').show();\n                $('#webSocketStatusRow').css('padding-bottom','25px');\n                onWebSocketClose();\n                wsConnectC();\n            };\n        }\n\n        function getRandomInt(max)\n        {\n          return Math.floor(Math.random() * Math.floor(max));\n        }\n        $( document ).ready(function()\n        {\n            userID  = {{{payload.userID}}};\n            if (!useWebSocketsFlag)\n            {\n                $('#webSocketStatusRow').css('padding-bottom','0px');\n                $('#webSocketStatusCard').hide();\n            }\n            wsConnectC();\n            onDocumentReady();\n       });\n        $( function() \n        {\n            $( \"#acknowledgeDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() { $( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n            $( \"#messageDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:[]\n                });\n        } );\n        function optionDialog(headerText, title, text, buttonTexts, buttonFunctions)\n        {\n            var buttonDefinitions = [];\n            for (var ii = 0; ii < buttonTexts.length; ++ii)\n            {\n                buttonDefinitions[ii] = \n                    {\n                        text: buttonTexts[ii],\n                        click: buttonFunctions[ii],\n                        showText: false\n                    };\n            }\n            $( \"#optionDialog\" ).dialog( \"option\", \"title\", headerText );   \n            $( \"#optionDialog\" ).dialog( \"option\", \"buttons\", buttonDefinitions);\n            $( \"#optionDialogTitle\" ).html(title);\n            $( \"#optionDialogText\" ).html(text);\n            $( \"#optionDialog\" ).dialog( \"open\" );\n        }\n        $( function() \n        {\n            $( \"#optionDialog\" ).dialog(\n                {\n                    width:    500,\n                    autoOpen: false,\n                    buttons:\n                    [\n                        {\n                            text: \"Ok\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                        {\n                            text: \"Cancel\",\n                            click: function() {$( this ).dialog( \"close\" );},\n                            showText: false\n                        },\n                   ]\n                });\n        } );\n        function acknowledgeDialog(headerText, title, text)\n        {\n            $( \"#acknowledgeDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#acknowledgeDialogTitle\" ).html(title);\n            $( \"#acknowledgeDialogText\" ).html(text);\n            $( \"#acknowledgeDialog\" ).dialog( \"open\" );\n        }\n        function messageDialog(headerText, title, text)\n        {\n            $( \"#messageDialog\" ).dialog( \"option\", \"title\", headerText );    \n            $( \"#messageDialogTitle\" ).html(title);\n            $( \"#messageDialogText\" ).html(text);\n            $( \"#messageDialog\" ).dialog( \"open\" );\n        }\n        function heartbeat()\n        {\n            heartBeatImage = !heartBeatImage;\n            var heartBeatImageSrc = '/img/heartRed.png';\n            if (heartBeatImage) heartBeatImageSrc = '/img/heartPink.png';\n            $('#heartBeatID').attr('src',heartBeatImageSrc);\n        }\n        function getCookie(extension)\n        {\n            var cookies = document.cookie.split(';');\n            var token = null;\n            var cookieName = project + extension + \"=\";\n            for (var icookie = 0; icookie < cookies.length; ++icookie)\n            {\n                var index = cookies[icookie].indexOf(cookieName);\n                if (index >= 0)\n                {\n                    token = cookies[icookie].substring(index + cookieName.length);\n                }\n            }\n            return token;\n        }\n        function sendActionMsg(topic,role,actionMsg)\n        {\n            var roleToken = \"\";\n            if (remoteApp) roleToken  = getCookie('Role');\n            if (roleToken == null)\n            {\n                location.reload();\n                return;\n            }\n            var webSocketMsg = \n            {\n                topic     : topic,\n                payload   : actionMsg,\n                userID    : userID,\n                token     : getCookie('Role'),\n                role      : role\n            };\n            ws.send(JSON.stringify(webSocketMsg));\n        }\n",
        "output": "str",
        "x": 430,
        "y": 40,
        "wires": [
            [
                "aa17ff35.7cdfd"
            ]
        ]
    },
    {
        "id": "99bb1519.85fc18",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "Get project name and userID",
        "func": "function getRandomInt(max)\n{\n  return Math.floor(Math.random() * Math.floor(max));\n}\nmsg.payload['project'] = global.get('project')\nmsg.payload['userID'] = getRandomInt(32768);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 220,
        "y": 40,
        "wires": [
            [
                "c4ed2505.8c07e8"
            ]
        ]
    },
    {
        "id": "a9a62959.7c01e8",
        "type": "template",
        "z": "ca529822.9112f8",
        "name": "html.websocket",
        "field": "payload.html.websocket",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!-- websocket status HTML -->\n    <div width=\"100%\">\n        <div class='row' id='webSocketStatusRow' style='padding-bottom: 0px;'>\n            <div class='col-md-12' align='center'>\n\n                <div class='card' id='webSocketStatusCard' >\n                    <p class='card-title'>Web Socket Status</p>\n                    <div class='card-body' align=\"center\">\n                        <div class='row'  style='padding-top: 0px;'>\n                            <table width='100%'>\n                                <tr>\n                                    <td width='60%' >\n                                        <span class='card-text' >Websocket Status</span>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <button class='btn card-button btn-block big-text' id='reOpenWebSocketButton' onclick=\"wsConnectC()\">Re-open</button>\n                                    </td>\n                                    <td width='20%' align='center'>\n                                        <span class='card-text' id='webSocketStatus' >Closed</span>\n                                   </td>\n                                </tr>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n",
        "output": "str",
        "x": 840,
        "y": 40,
        "wires": [
            [
                "35ffcf83.1547"
            ]
        ]
    },
    {
        "id": "35ffcf83.1547",
        "type": "function",
        "z": "ca529822.9112f8",
        "name": "IP filter",
        "func": "var ipfilter = [\n    \"127.0.0.16\"];\nvar ipAddress = ( msg.req.headers['x-forwarded-for'] || '').split(',').pop() || \n          msg.req.connection.remoteAddress || \n          msg.req.socket.remoteAddress || \n          msg.req.connection.socket.remoteAddress;\nif (ipAddress==undefined) return null;\nvar ipAddressSplit = ipAddress.split(\".\");\nfor (var ii =  0; ii < ipfilter.length; ++ii)\n{\n    var ipfilterSplit = ipfilter[ii].split(\".\");\n    if (ipAddress == ipfilter[ii])\n    { \n        return null;\n    }\n    if (ipfilterSplit[2] == '*')\n    {\n        if ((ipfilterSplit[0] == ipAddressSplit[0]) && (ipfilterSplit[1] == ipAddressSplit[1]))\n        {\n            return null;\n        }\n    }\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 990,
        "y": 40,
        "wires": [
            [
                "b9df3f26.ab53f"
            ]
        ]
    },
    {
        "id": "f5a9eda8.5c5bc",
        "type": "template",
        "z": "e3c68b88.d82258",
        "name": "CSS",
        "field": "payload.css",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": "        :root \n        {\n          --color1: #415c71;\n          --color2: #547792;\n          --color3: #9eb5c7;\n          --color4: #c6c2bb;\n          --color5: #fdc300;\n          --big-text-size :300%;\n          --bold-text :900;\n          --vert-pad : 25px;\n          --horz-pad : 25px;\n        }\n        body \n        {\n          background-color: white !important;\n          padding-left:25px;\n          padding-right:25px;\n        }\n        \n        img \n        {\n          object-fit: contain;\n        }\n        a\n        {\n            color: white;\n        }\n        a:visited \n        { \n            color: var(--white);\n        }\n        a:hover \n        { \n            color: var(--color5);\n        }\n\n        .jumbotron \n        {\n          background-color: var(--color2) !important;\n          color: white;\n          padding-top:25px;\n          padding-bottom:25px;\n        }\n        .jumbotron-title\n        {\n          color:var(--color5);\n        }\n        .jumbotron-button\n        {\n          color: white;\n          background-color: var(--color1);\n       }\n        .card\n        {\n          background-color: var(--color2) !important;\n          text-align: center;\n        }\n        .card-body\n        {\n          background-color: var(--color3);;\n        }\n        .card-button\n        {\n          color: var(--color5) !important;\n          background-color: var(--color1) !important;\n          font-weight: bold;\n        }\n        .card-title\n        {\n          color: var(--color5);\n          font-weight: var(--bold-text);\n          font-size: var(--big-text-size);\n         }\n        .card-text\n        {\n          color: white;\n          text-align: left;\n          font-size: var(--big-text-size);\n        }\n        .tableHeading\n        {\n          color:var(--container-title-color);\n        }\n        .tableText\n        {\n          color:var(--container-text-color);\n          font-size: var(--big-text-size);\n        }\n       .vert-pad\n        {\n            padding-top:var(--vert-pad);;\n            padding-bottom:var(--vert-pad);;\n        }\n        .horz-pad\n        {\n            padding-left:var(--horz-pad);;\n            padding-right:var(--horz-pad);;\n        }\n        .big-text\n        {\n            font-size: var(--big-text-size);\n        }\n        .bold-text\n        {\n            font-weight: var(--bold-text);\n        }\n       .ui-dialog-titlebar-close \n        {\n            visibility: hidden;\n        }\n        input.inputLarger \n        { \n            transform: scale(3); \n            margin: 1px;\n        }\n        .googleSlide4by3-container \n        {\n            position: relative;\n            overflow: hidden;\n            padding-top: 75.0%;\n        }\n        .googleSlide4by3-iframe {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            border: 0;\n        }        \n        .custom-select\n        {\n            color: black;\n            background-color: white;\n            height:80px;\n            line-height:70px;\n        }\n",
        "output": "str",
        "x": 190,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "966e270e.701e48",
        "type": "subflow:e3c68b88.d82258",
        "z": "8341090a.df9758",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "899d0666.97b868"
            ]
        ]
    },
    {
        "id": "9460eaf0.da7628",
        "type": "subflow:ca529822.9112f8",
        "z": "8341090a.df9758",
        "name": "",
        "x": 620,
        "y": 80,
        "wires": []
    },
    {
        "id": "899d0666.97b868",
        "type": "subflow:2c5d25cb.3428ca",
        "z": "8341090a.df9758",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "9460eaf0.da7628"
            ]
        ]
    },
    {
        "id": "96257109c2d49ab2",
        "type": "function",
        "z": "b0590efd9327f119",
        "name": "Check Setting",
        "func": "device = global.get('device');\ndevice.settingInProgress = 0;\nswitch(msg.payload.address)\n{\n/*\n    case 1:\n        device.led1.value = msg.payload.value;\n        break;\n*/\n    default:\n        break;\n}\nreturn {topic:'settingCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "412820e266410a18",
        "type": "function",
        "z": "52dab9565680d881",
        "name": "Create Readings",
        "func": "var device = global.get('device');\nif (device.archiveNow > 0) return null;\n\nvar initCube             = msg.payload[0];\nvar initCubeMsg = null;\nif (initCube == 1)\n{\n    initCubeMsg = {topic:\"initCube\",payload:true};\n    device.settingInProgress = 1;\n    return  [null ,initCubeMsg];\n}\n\ndevice.vbat.value        = Math.round(100 * 2.0 * 3.3* msg.payload[1] / 1024) / 100;\n//eonCount is a uint_32 so extract it from the last two int16\nvar buffer = new ArrayBuffer(4);\nvar testView = new DataView(buffer);\ntestView.setInt16(0, msg.payload[2], true); \ntestView.setInt16(2, msg.payload[3], true); \nvar combBuff = Buffer.from(buffer);\nvar dataView = new DataView(new ArrayBuffer(4));\nfor (ib = 0; ib < 4; ++ib) dataView.setUint8(ib, combBuff[3 - ib]);\nvar cubeCount = dataView.getUint32(0);\n\nvar last5mCount = global.get('last5mCount');\nif (last5mCount == undefined) last5mCount = -1;\nif ((last5mCount < 0) || (last5mCount > cubeCount) )\n{\n    last5mCount = cubeCount;\n    global.set('last5mCount',cubeCount);\n}\ndevice.power.value = (cubeCount - last5mCount) * 12; //assuming interval is 5 minutes\nglobal.set('last5mCount',cubeCount);\n\nvar now = new Date(msg.timeStamp);\nnow.setMilliseconds(0);\nnow.setSeconds(0);\n//now.setMinutes(0);\ndevice.timeStamp = now.getTime();\nif (now.getMinutes() == 0) \n{\n    device.countTimeStamp.value = now.getTime();\n    var lastEonCount = global.get('lastEonCount');\n    if (lastEonCount == undefined) lastEonCount = -1;\n    if ((lastEonCount < 0) || (lastEonCount > cubeCount) )\n    {\n        lastEonCount = cubeCount;\n        global.set('lastEonCount',cubeCount);\n    }\n    device.eonCount.value =  cubeCount;\n    device.hourEnergy.value = (device.eonCount.value - lastEonCount) / 1000;\n    device.ehourCost.value = global.get('eprice') * device.hourEnergy.value;\n    \n    device.archiveNow = 1;\n    global.set('lastEonCount',device.eonCount.value);\n}\nnode.warn(cubeCount.toString() + ' ' + device.power.value.toFixed(0) + ' ' + device.vbat.value.toString());\n\nreturn  [{topic:'newSettingDone', payload:true},null];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "087714ee84e23b57",
        "type": "function",
        "z": "4bc85721459d7e16",
        "name": "Create Setting",
        "func": "var device = global.get('device');\nvar blinkyBusSettingMsg = \n{\n    topic : msg.topic, \n    payload : { value: msg.payload.value,  'address': -1  } \n}\nvar blinkyBusMessage = false;\nswitch(msg.payload.attr)\n{\n/*\n        case 'led1':\n        blinkyBusSettingMsg.payload.address = 1;\n        blinkyBusMessage = true;\n        break;\n    case 'nonblinkyBusSetting':\n        device.nonblinkyBusSetting.value  = msg.payload.value;\n        blinkyBusMessage = false;\n        break;\n*/\n    default:\n        break;\n}\nvar msgArray = [null,null,null];\nif (blinkyBusMessage)\n{\n    device.settingInProgress = 1;\n    var settingInProgressMsg = {topic:'settingInProgress', payload:true};\n    msgArray = [blinkyBusSettingMsg, settingInProgressMsg, null];\n    \n}\nelse\n{\n    device.settingInProgress = 0;\n    msgArray = [null,null,{topic:'settingDone', payload:true}];\n}\nreturn msgArray;",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "79cd6887f7e9ed8e",
        "type": "function",
        "z": "e17c93fc0f5cec42",
        "name": "Init cube",
        "func": "var device = global.get('device');\nvar cubeInit = global.get('cubeInit');\nif (cubeInit == 1) \n{\n    global.set('last5mCount',-1);\n    global.set('lastEonCount',-1);\n    device.eonCount.value = 0;\n    var msgs = [];\n    msgs[0] = {\"address\":-1,\"value\":0};\n    return {topic : 'initCube', payload: msgs};\n}\nif (cubeInit == 2) \n{\n    var buffer = new ArrayBuffer(4);\n    var settingsView = new DataView(buffer);\n    settingsView.setUint32(0, device.eonCount.value, true); \n    var da = Buffer.from(buffer);\n    \n    var dataView     = new DataView(new ArrayBuffer(2));\n    for (ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, da[1 - ib]);\n    var int1 = dataView.getInt16(0);\n    for (ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, da[3 - ib]);\n    var int2 = dataView.getInt16(0);\n    var msgs = [];\n    msgs[0] = {\"address\":0,\"value\":0};\n    msgs[1] = {\"address\":2,\"value\":int1};\n    msgs[2] = {\"address\":3,\"value\":int2};\n    //must be the last!\n    msgs[3] = {\"address\":-1,\"value\":0};\n    return {topic : 'initCube', payload: msgs};\n}\nreturn null;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cbd26ade8d7fd8ba",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Save device config in Memory",
        "func": "msg.payload.settingInProgress = 1;\nglobal.set('device', msg.payload);\nglobal.set('cubeInit', 1);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 60,
        "wires": [
            [
                "00a0aaa4f51b0138"
            ]
        ]
    },
    {
        "id": "6116cd0c6a1c618c",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "deviceA",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "deviceA",
        "payload": "MQTTDEVICEA",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "f5eb24fdeba3e8bd"
            ]
        ]
    },
    {
        "id": "a53943973c168ecc",
        "type": "file in",
        "z": "16343784c71a3679",
        "name": "Read device config",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 490,
        "y": 60,
        "wires": [
            [
                "ecdfdbe993553989"
            ]
        ]
    },
    {
        "id": "ecdfdbe993553989",
        "type": "json",
        "z": "16343784c71a3679",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 650,
        "y": 60,
        "wires": [
            [
                "cbd26ade8d7fd8ba"
            ]
        ]
    },
    {
        "id": "f5eb24fdeba3e8bd",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Init flow Variables",
        "func": "var mqttSplit = msg.payload.split('/');\nvar deviceProps = {\n    project     :   mqttSplit[0],\n    deviceType  :   mqttSplit[1],\n    name        :   mqttSplit[2],\n    configFile  :   mqttSplit[1] + '-' + mqttSplit[2] + '.json',\n    mapFile     :   mqttSplit[1] + '-' + mqttSplit[2] + '-map.json'\n};\nglobal.set('deviceProps',deviceProps);\nreturn {topic: 'readFile', 'filename':deviceProps.configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 60,
        "wires": [
            [
                "a53943973c168ecc"
            ]
        ]
    },
    {
        "id": "faaba114d5862c28",
        "type": "file",
        "z": "16343784c71a3679",
        "name": "Init Settings",
        "filename": "",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1270,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4f136758aa69a93f",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Save Settings to File",
        "func": "var jsonPretty = JSON.stringify(global.get('device'),null,2);\nreturn {topic: msg.payload, payload:jsonPretty, 'filename':global.get('deviceProps').configFile};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 340,
        "wires": [
            [
                "faaba114d5862c28"
            ]
        ]
    },
    {
        "id": "03abeb43e804a645",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Device A web socket in",
        "links": [
            "6a37b4ab.65c53c",
            "ea909034.6fb25"
        ],
        "x": 55,
        "y": 240,
        "wires": [
            [
                "42ee17b134f05a89"
            ]
        ]
    },
    {
        "id": "cc05bf524971ef18",
        "type": "json",
        "z": "16343784c71a3679",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "8fbc7eda73a4800d"
            ]
        ]
    },
    {
        "id": "f02d88e563a61167",
        "type": "exec",
        "z": "16343784c71a3679",
        "command": "pm2 restart ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Restart",
        "x": 680,
        "y": 1460,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "52450e7cbbbe2c3a",
        "type": "switch",
        "z": "16343784c71a3679",
        "name": "Reset Tray",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 1540,
        "wires": [
            [
                "5f5aa5686059a62b"
            ],
            [
                "5e60844b28d9a442"
            ]
        ]
    },
    {
        "id": "5e60844b28d9a442",
        "type": "exec",
        "z": "16343784c71a3679",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 500,
        "y": 1580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "030dd6de27c1a554",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "52450e7cbbbe2c3a"
            ]
        ]
    },
    {
        "id": "a16ab3114779a2a0",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Readings Alarm Scan",
        "func": "if (!msg.payload) return null;\nvar device = global.get('device');\ndevice.linkQuality.value     = global.get('linkQuality');\ndevice.signalLevel.value     = global.get('signalLevel');\nvar alarmFlagReading = scalarAlarmScan(device, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(device, 'setting');\nvar newMsg = null;\nif (alarmFlagReading || alarmFlagSetting)\n{\n    newMsg = \n    {\n        topic: 'alarm',\n        payload: true\n    }\n}\nif (device.archiveNow > 0)\n{\n    newMsg = \n    {\n        topic: 'archiveNow',\n        payload: true\n    }\n}\nreturn newMsg;\n\nfunction getActionArray(device, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(device);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (device[keys[ii]].hasOwnProperty('type'))\n        {\n            if (device[keys[ii]].type == type)\n            {\n                if (device[keys[ii]].action == actionType)\n                {\n                    actionArray.push(device[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(device, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(device, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n            }\n            if (actionArray[ii].alarm.value > 0)  alarmFlag = true\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 600,
        "wires": [
            [
                "cee05fa608db5b59"
            ]
        ]
    },
    {
        "id": "e899d6e3399183df",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Prepare MQTT topic",
        "func": "var mqttArray = msg.topic.split('/');\nvar device = \n{\n    project     : mqttArray[0],\n    deviceType  : mqttArray[1],\n    name        : mqttArray[2],\n    prop        : mqttArray[3],\n};\nreturn {topic : msg.topic, payload:{topic:'readings', mqttDevice : device, payload:msg.payload}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1260,
        "y": 260,
        "wires": [
            [
                "271517431040d03b"
            ]
        ]
    },
    {
        "id": "271517431040d03b",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Device A web socket out",
        "links": [
            "833c12de.18f4f",
            "d033193d.436d68"
        ],
        "x": 1395,
        "y": 260,
        "wires": []
    },
    {
        "id": "693796886b6a4555",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "read Status",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/5 0-23 * * *",
        "once": false,
        "onceDelay": "8",
        "topic": "readTable",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 640,
        "wires": [
            [
                "11288209a003ea5d"
            ]
        ]
    },
    {
        "id": "f385ca07c169db96",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 370,
        "y": 340,
        "wires": [
            [
                "40e46c5b7a046f38"
            ]
        ]
    },
    {
        "id": "2a81f524c4540bc3",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "New Setting In",
        "links": [
            "7426b4e2543d319e"
        ],
        "x": 755,
        "y": 140,
        "wires": []
    },
    {
        "id": "7426b4e2543d319e",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "blinkybus setting in",
        "links": [
            "2a81f524c4540bc3"
        ],
        "x": 55,
        "y": 380,
        "wires": [
            [
                "efa0b2403b76c306"
            ]
        ]
    },
    {
        "id": "fa8e047dbdda36cd",
        "type": "switch",
        "z": "16343784c71a3679",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reset",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 650,
        "y": 160,
        "wires": [
            [
                "2a81f524c4540bc3"
            ],
            [
                "e14e774013037844"
            ],
            [
                "9a92b2992704d1cb"
            ],
            [
                "185359d7d0dca46d"
            ]
        ]
    },
    {
        "id": "8fbc7eda73a4800d",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[4], payload:msg.payload};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "fa8e047dbdda36cd"
            ]
        ]
    },
    {
        "id": "980c240d139c797d",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Shift Msg",
        "func": "return msg.payload;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "80ac447299672074"
            ]
        ]
    },
    {
        "id": "80ac447299672074",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Filter Websocket",
        "func": "var inputDeviceProps = msg.payload.topic.split('/');\nvar deviceProps = global.get('deviceProps')\nif (inputDeviceProps[0] != deviceProps.project) return null;\nif (inputDeviceProps[1] != deviceProps.deviceType) return null;\nif (inputDeviceProps[2] != deviceProps.name) return null;\nreturn {topic:msg.topic, payload:msg.payload.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "fa8e047dbdda36cd"
            ]
        ]
    },
    {
        "id": "42ee17b134f05a89",
        "type": "json",
        "z": "16343784c71a3679",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 150,
        "y": 240,
        "wires": [
            [
                "980c240d139c797d"
            ]
        ]
    },
    {
        "id": "11288209a003ea5d",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Read BlinkyBus",
        "func": "if (global.get('device').settingInProgress != 0) return null;\nif (global.get('cubeInit') != 0) return null;\nreturn {topic: \"readStatus\", payload:true, timeStamp:msg.payload};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 640,
        "wires": [
            [
                "7b0ff3c17f1cc946"
            ]
        ]
    },
    {
        "id": "edd565c00e2d14cc",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Publish device",
        "func": "if (!msg.payload) return null;\nvar device = global.get('device');\nvar newMsg = \n{\n    topic: global.get('deviceProps').project + '/' + global.get('deviceProps').deviceType + '/' + global.get('deviceProps').name + '/reading',\n    payload: JSON.stringify(device)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 220,
        "wires": [
            [
                "e899d6e3399183df",
                "a1d55b5fcb48d1e1"
            ]
        ]
    },
    {
        "id": "6139c39373e2cc2b",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Publish Device In",
        "links": [
            "cee05fa608db5b59",
            "e14e774013037844",
            "4b0eae11362acc09",
            "ad1939eefe57b104",
            "b0419c5e339e6769",
            "700c7f6628a4bc9c",
            "6f0dc7860513a0fc",
            "5e24cfb305c84a24",
            "03ee51273b35e7ea"
        ],
        "x": 915,
        "y": 220,
        "wires": [
            [
                "edd565c00e2d14cc"
            ]
        ]
    },
    {
        "id": "cee05fa608db5b59",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Alarm Scan out",
        "links": [
            "6139c39373e2cc2b"
        ],
        "x": 1155,
        "y": 600,
        "wires": []
    },
    {
        "id": "e14e774013037844",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Ping Out",
        "links": [
            "6139c39373e2cc2b"
        ],
        "x": 755,
        "y": 180,
        "wires": []
    },
    {
        "id": "4b0eae11362acc09",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Create Setting out",
        "links": [
            "6139c39373e2cc2b"
        ],
        "x": 315,
        "y": 380,
        "wires": []
    },
    {
        "id": "d410a3d980a32045",
        "type": "split",
        "z": "16343784c71a3679",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1350,
        "y": 60,
        "wires": [
            [
                "7c03305f203bd369"
            ]
        ]
    },
    {
        "id": "7c03305f203bd369",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1500,
        "y": 60,
        "wires": [
            [
                "938e57d978bbeec1"
            ]
        ]
    },
    {
        "id": "6067363106755c9a",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Pause Device readings",
        "func": "var device = global.get('device');\ndevice.settingInProgress = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 520,
        "wires": [
            [
                "3767485972539af4",
                "b0419c5e339e6769"
            ]
        ]
    },
    {
        "id": "9a92b2992704d1cb",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Config Out",
        "links": [
            "8946ad3fcb436bb1"
        ],
        "x": 755,
        "y": 220,
        "wires": []
    },
    {
        "id": "8946ad3fcb436bb1",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Pause Device Readings in",
        "links": [
            "9a92b2992704d1cb"
        ],
        "x": 55,
        "y": 520,
        "wires": [
            [
                "6067363106755c9a"
            ]
        ]
    },
    {
        "id": "3767485972539af4",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 440,
        "y": 520,
        "wires": [
            [
                "95ba7eda81c7e2c3"
            ]
        ]
    },
    {
        "id": "95ba7eda81c7e2c3",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Save config file",
        "func": "global.set('device',JSON.parse(JSON.stringify(msg.payload)));\nvar device = global.get('device');\ndevice.settingInProgress = 1;\n\nreturn {topic:'deviceConfigCompleted', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 520,
        "wires": [
            [
                "74ceeab132e937da",
                "3d5cd6f34322f108"
            ]
        ]
    },
    {
        "id": "74ceeab132e937da",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 820,
        "y": 520,
        "wires": [
            [
                "26c57e0560b3f1fb"
            ]
        ]
    },
    {
        "id": "26c57e0560b3f1fb",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Continue Device readings",
        "func": "var device = global.get('device');\ndevice.settingInProgress = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "700c7f6628a4bc9c"
            ]
        ]
    },
    {
        "id": "ad1939eefe57b104",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Check blinkybus Setting out",
        "mode": "link",
        "links": [
            "31206dca012414d8",
            "6139c39373e2cc2b"
        ],
        "x": 855,
        "y": 340,
        "wires": []
    },
    {
        "id": "31206dca012414d8",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Save Settings to file in",
        "links": [
            "ad1939eefe57b104",
            "3d5cd6f34322f108",
            "5e24cfb305c84a24"
        ],
        "x": 935,
        "y": 340,
        "wires": [
            [
                "4f136758aa69a93f"
            ]
        ]
    },
    {
        "id": "b0419c5e339e6769",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Pause Device Readings out",
        "links": [
            "6139c39373e2cc2b"
        ],
        "x": 395,
        "y": 480,
        "wires": []
    },
    {
        "id": "3d5cd6f34322f108",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Save config file out",
        "links": [
            "31206dca012414d8"
        ],
        "x": 775,
        "y": 480,
        "wires": []
    },
    {
        "id": "700c7f6628a4bc9c",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Continue Devie Readings out",
        "links": [
            "6139c39373e2cc2b"
        ],
        "x": 1175,
        "y": 520,
        "wires": []
    },
    {
        "id": "f02f0cd48104223c",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "8",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 140,
        "y": 780,
        "wires": [
            [
                "90018da16debef50"
            ]
        ]
    },
    {
        "id": "90018da16debef50",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Archive Pulse",
        "func": "var device = global.get('device');\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= device.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "6f0dc7860513a0fc"
            ]
        ]
    },
    {
        "id": "6f0dc7860513a0fc",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Archive Pulse Out",
        "links": [
            "6139c39373e2cc2b"
        ],
        "x": 475,
        "y": 780,
        "wires": []
    },
    {
        "id": "185359d7d0dca46d",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Reset Out",
        "links": [
            "0155afd7649179b1"
        ],
        "x": 755,
        "y": 260,
        "wires": []
    },
    {
        "id": "0155afd7649179b1",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Reset in",
        "links": [
            "185359d7d0dca46d"
        ],
        "x": 55,
        "y": 1540,
        "wires": [
            [
                "030dd6de27c1a554"
            ]
        ]
    },
    {
        "id": "5e24cfb305c84a24",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "nonBlinkybusSetting Out",
        "mode": "link",
        "links": [
            "31206dca012414d8",
            "6139c39373e2cc2b"
        ],
        "x": 315,
        "y": 420,
        "wires": []
    },
    {
        "id": "fd6a29d4dda908dd",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 130,
        "y": 840,
        "wires": [
            [
                "76d6712bed883108"
            ]
        ]
    },
    {
        "id": "76d6712bed883108",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Single Archive Pulse",
        "func": "var device = global.get('device');\ndevice.archiveNow = 1;\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 840,
        "wires": [
            [
                "6f0dc7860513a0fc"
            ]
        ]
    },
    {
        "id": "a1d55b5fcb48d1e1",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Check ArchiveNow",
        "func": "var device = global.get(\"device\");\nvar resetArchiveNowMsg = null;\nif (device.archiveNow > 0) resetArchiveNowMsg = {topic:\"resetArchiveNow\", payload:true};\nreturn [msg,resetArchiveNowMsg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1250,
        "y": 180,
        "wires": [
            [
                "8c01219725a335ee"
            ],
            [
                "aea45e6e32184f11"
            ]
        ]
    },
    {
        "id": "aea45e6e32184f11",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1490,
        "y": 240,
        "wires": [
            [
                "1b3ea92d756b5460"
            ]
        ]
    },
    {
        "id": "1b3ea92d756b5460",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Reset ArchiveNow",
        "func": "global.get(\"device\").archiveNow = 0;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 240,
        "wires": []
    },
    {
        "id": "0d15715baf56bc48",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Allow Readings",
        "func": "if (msg.payload.address == -1)\n{\n    global.get(\"device\").settingInProgress = 0;\n    global.set('cubeInit', 0);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "03ee51273b35e7ea",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Start Init Cube",
        "links": [
            "2150949730b4ba06",
            "6139c39373e2cc2b"
        ],
        "x": 835,
        "y": 660,
        "wires": []
    },
    {
        "id": "065d505d10fa535f",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "begin re-init cube",
        "links": [
            "7d3632bf6e417fd5"
        ],
        "x": 1155,
        "y": 700,
        "wires": []
    },
    {
        "id": "7d3632bf6e417fd5",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "read device config in",
        "links": [
            "065d505d10fa535f"
        ],
        "x": 975,
        "y": 100,
        "wires": [
            [
                "00a0aaa4f51b0138"
            ]
        ]
    },
    {
        "id": "d50c5dd751c0360f",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Save flow env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1120,
        "wires": []
    },
    {
        "id": "ecd27d4feffe3158",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "serialBufSize",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "serialBufSize",
        "payload": "SERIALBUFSIZE",
        "payloadType": "env",
        "x": 130,
        "y": 1120,
        "wires": [
            [
                "d50c5dd751c0360f"
            ]
        ]
    },
    {
        "id": "1382e1e449a9acc6",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Send Setting",
        "func": "if (global.get('device').settingInProgress == -1) return null;\nglobal.get('device').settingInProgress = 1;\nvar bufsize = 4;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 1, true); //setting\nsettingsView.setUint8(1, msg.payload.address, true); //address\nsettingsView.setInt16(2, msg.payload.value, true); //value\nreturn {topic:'setting',payload:Buffer.from(buffer),address:msg.payload.address};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 960,
        "wires": [
            [
                "531b2eefba96dbb0"
            ]
        ]
    },
    {
        "id": "531b2eefba96dbb0",
        "type": "serial request",
        "z": "16343784c71a3679",
        "name": "Blinky-Bus",
        "serial": "4381096bc94740bd",
        "x": 350,
        "y": 1000,
        "wires": [
            [
                "201d716b3d9a9ac4"
            ]
        ]
    },
    {
        "id": "e66ea37ac70c12ab",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Check Setting",
        "func": "var dataView     = new DataView(new ArrayBuffer(2));\nfor (ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[msg.address * 2 + 1 - ib]);\nvar setting = dataView.getInt16(0);\nreturn {topic:msg.topic,payload:{address:msg.address,value:setting}};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 960,
        "wires": [
            [
                "a921afda4ec82e4e"
            ]
        ]
    },
    {
        "id": "201d716b3d9a9ac4",
        "type": "switch",
        "z": "16343784c71a3679",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "reading",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 1000,
        "wires": [
            [
                "e66ea37ac70c12ab"
            ],
            [
                "7ae2ceef85287933"
            ]
        ]
    },
    {
        "id": "90cd3dcf52e24406",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Get Reading",
        "func": "var bufsize = 4;\nvar buffer = new ArrayBuffer(bufsize);\nvar settingsView = new DataView(buffer);\nsettingsView.setUint8(0, 0, true); //setting\nsettingsView.setUint8(1, 0, true); //address\nsettingsView.setInt16(2, 0, true); //value\n\nreturn {topic:'reading',payload:Buffer.from(buffer),timeStamp:msg.timeStamp};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "531b2eefba96dbb0"
            ]
        ]
    },
    {
        "id": "7ae2ceef85287933",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Check Reading",
        "func": "var serialBufSize = global.get('serialBufSize');\nvar dataView     = new DataView(new ArrayBuffer(2));\nvar dataBuffer = [];\nfor (var ii = 0; ii < (msg.payload.length / 2); ++ii)\n{\n    for (ib = 0; ib < 2; ++ib)   dataView.setUint8(ib, msg.payload[(ii * 2) + 1 - ib]);\n    dataBuffer.push( dataView.getInt16(0));\n}\nreturn {topic:msg.topic,payload:dataBuffer, timeStamp:msg.timeStamp};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1040,
        "wires": [
            [
                "eb579a3e0d95679e"
            ]
        ]
    },
    {
        "id": "0febcf94997e5cb8",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "BlinkyBus Setting In",
        "links": [
            "01598091ca19387c",
            "4f4b52e76f8d2b26",
            "40e46c5b7a046f38"
        ],
        "x": 55,
        "y": 960,
        "wires": [
            [
                "1382e1e449a9acc6"
            ]
        ]
    },
    {
        "id": "c411c3f180ce518a",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "BlinkyBus Reading In",
        "links": [
            "6238aa4113faa347",
            "7b0ff3c17f1cc946"
        ],
        "x": 55,
        "y": 1040,
        "wires": [
            [
                "90cd3dcf52e24406"
            ]
        ]
    },
    {
        "id": "a921afda4ec82e4e",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "BlinkyBus Setting Out",
        "mode": "link",
        "links": [
            "51ab68bf6ce7ba49",
            "7c8b5ebf62cc1f76",
            "58fa7530de31de63"
        ],
        "x": 755,
        "y": 960,
        "wires": []
    },
    {
        "id": "eb579a3e0d95679e",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "BlinkyBus Reading Out",
        "mode": "link",
        "links": [
            "a3d99d9c796d9231",
            "84f064cac2597f93"
        ],
        "x": 755,
        "y": 1040,
        "wires": []
    },
    {
        "id": "4f4b52e76f8d2b26",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Init cube setting in",
        "mode": "link",
        "links": [
            "0febcf94997e5cb8"
        ],
        "x": 1755,
        "y": 60,
        "wires": []
    },
    {
        "id": "7c8b5ebf62cc1f76",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Init cube setting out",
        "links": [
            "a921afda4ec82e4e"
        ],
        "x": 1835,
        "y": 60,
        "wires": [
            [
                "bdd0de45549bda30"
            ]
        ]
    },
    {
        "id": "7b0ff3c17f1cc946",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Poll BlinkBus In",
        "mode": "link",
        "links": [
            "c411c3f180ce518a"
        ],
        "x": 415,
        "y": 640,
        "wires": []
    },
    {
        "id": "84f064cac2597f93",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Poll BlinkBus Out",
        "links": [
            "eb579a3e0d95679e"
        ],
        "x": 555,
        "y": 640,
        "wires": [
            [
                "bb58b32d3cf999be"
            ]
        ]
    },
    {
        "id": "40e46c5b7a046f38",
        "type": "link out",
        "z": "16343784c71a3679",
        "name": "Device Setting In",
        "mode": "link",
        "links": [
            "0febcf94997e5cb8"
        ],
        "x": 475,
        "y": 340,
        "wires": []
    },
    {
        "id": "58fa7530de31de63",
        "type": "link in",
        "z": "16343784c71a3679",
        "name": "Device Setting Out",
        "links": [
            "a921afda4ec82e4e"
        ],
        "x": 615,
        "y": 340,
        "wires": [
            [
                "938cf7ac45972ca7"
            ]
        ]
    },
    {
        "id": "e7bfe5420b9d8cac",
        "type": "status",
        "z": "16343784c71a3679",
        "name": "",
        "scope": [
            "531b2eefba96dbb0"
        ],
        "x": 100,
        "y": 1300,
        "wires": [
            [
                "dfe2b559086ca9cb"
            ]
        ]
    },
    {
        "id": "dfe2b559086ca9cb",
        "type": "switch",
        "z": "16343784c71a3679",
        "name": "",
        "property": "status.fill",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "red",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "green",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 260,
        "y": 1300,
        "wires": [
            [
                "dbe7708407c755ec"
            ],
            [
                "6c68dd8b3edd23bc"
            ]
        ]
    },
    {
        "id": "dbe7708407c755ec",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Serial Not Connected",
        "func": "global.get('device').settingInProgress = -1;\nglobal.set('serialState', 0);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('serialState', 0);\n",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1260,
        "wires": []
    },
    {
        "id": "2459cfec4999e8fb",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Reset Setting in Progress",
        "func": "if (global.get('device').settingInProgress == -1) \n{\n    if (global.get('serialState') == 1) global.get('device').settingInProgress = 0;\n    return msg;\n}\nelse\n{\n    return null;\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "6c68dd8b3edd23bc",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Serial Connected",
        "func": "if (global.get('device') == undefined) return null;\nglobal.set('serialState', 1);\nif (global.get('device').settingInProgress != -1) return null\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1340,
        "wires": [
            [
                "7dc1219d01534297"
            ]
        ]
    },
    {
        "id": "7dc1219d01534297",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "7",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 610,
        "y": 1340,
        "wires": [
            [
                "2459cfec4999e8fb"
            ]
        ]
    },
    {
        "id": "4216be351063be91",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 700,
        "wires": [
            [
                "3e7eb8a39741a94e"
            ]
        ]
    },
    {
        "id": "bcd7913e58196183",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1210,
        "y": 60,
        "wires": [
            [
                "d410a3d980a32045"
            ]
        ]
    },
    {
        "id": "5ffeaccb6a22ec4b",
        "type": "catch",
        "z": "16343784c71a3679",
        "name": "",
        "scope": [
            "e66ea37ac70c12ab",
            "7ae2ceef85287933",
            "531b2eefba96dbb0"
        ],
        "uncaught": false,
        "x": 90,
        "y": 1240,
        "wires": [
            [
                "dbe7708407c755ec"
            ]
        ]
    },
    {
        "id": "bdd0de45549bda30",
        "type": "debug",
        "z": "16343784c71a3679",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1970,
        "y": 60,
        "wires": []
    },
    {
        "id": "938e57d978bbeec1",
        "type": "switch",
        "z": "16343784c71a3679",
        "name": "",
        "property": "payload.address",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gte",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "-1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1650,
        "y": 60,
        "wires": [
            [
                "4f4b52e76f8d2b26"
            ],
            [
                "7a21e211a7a9b125"
            ]
        ]
    },
    {
        "id": "7a21e211a7a9b125",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1800,
        "y": 120,
        "wires": [
            [
                "0d15715baf56bc48"
            ]
        ]
    },
    {
        "id": "c462cb5263d7792f",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "pm2Name",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "pm2Name",
        "payload": "PM2NAME",
        "payloadType": "env",
        "x": 130,
        "y": 1180,
        "wires": [
            [
                "d50c5dd751c0360f"
            ]
        ]
    },
    {
        "id": "5f5aa5686059a62b",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Get pm2Name",
        "func": "msg.payload = global.get(\"pm2Name\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1460,
        "wires": [
            [
                "f02d88e563a61167"
            ]
        ]
    },
    {
        "id": "00a0aaa4f51b0138",
        "type": "subflow:e17c93fc0f5cec42",
        "z": "16343784c71a3679",
        "name": "",
        "x": 1060,
        "y": 60,
        "wires": [
            [
                "bcd7913e58196183"
            ]
        ]
    },
    {
        "id": "efa0b2403b76c306",
        "type": "subflow:4bc85721459d7e16",
        "z": "16343784c71a3679",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "f385ca07c169db96"
            ],
            [
                "4b0eae11362acc09"
            ],
            [
                "5e24cfb305c84a24"
            ]
        ]
    },
    {
        "id": "bb58b32d3cf999be",
        "type": "subflow:52dab9565680d881",
        "z": "16343784c71a3679",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "a16ab3114779a2a0"
            ],
            [
                "03ee51273b35e7ea",
                "4216be351063be91"
            ]
        ]
    },
    {
        "id": "938cf7ac45972ca7",
        "type": "subflow:b0590efd9327f119",
        "z": "16343784c71a3679",
        "x": 740,
        "y": 340,
        "wires": [
            [
                "ad1939eefe57b104"
            ]
        ]
    },
    {
        "id": "66ece5328d75dc5c",
        "type": "mqtt in",
        "z": "16343784c71a3679",
        "name": "Subscribe DeviceA",
        "topic": "$(MQTTDEVICEA)",
        "qos": "0",
        "datatype": "auto",
        "broker": "cf9f84d0.6fba78",
        "inputs": 0,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "cc05bf524971ef18"
            ]
        ]
    },
    {
        "id": "8c01219725a335ee",
        "type": "mqtt out",
        "z": "16343784c71a3679",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf9f84d0.6fba78",
        "x": 1490,
        "y": 180,
        "wires": []
    },
    {
        "id": "bd0b250787d3cc26",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "Every hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1720,
        "wires": [
            [
                "477369f864ed3cc2"
            ]
        ]
    },
    {
        "id": "477369f864ed3cc2",
        "type": "delay",
        "z": "16343784c71a3679",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "minutes",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 290,
        "y": 1720,
        "wires": [
            [
                "39ab8281a318a080"
            ]
        ]
    },
    {
        "id": "46f21a410aebfa41",
        "type": "inject",
        "z": "16343784c71a3679",
        "name": "Init+5sec",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1660,
        "wires": [
            [
                "39ab8281a318a080"
            ]
        ]
    },
    {
        "id": "f3b00bbf2f5e3f78",
        "type": "json",
        "z": "16343784c71a3679",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 310,
        "y": 1820,
        "wires": [
            [
                "de2e37fd6b02db78"
            ]
        ]
    },
    {
        "id": "de2e37fd6b02db78",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Save espotPrice",
        "func": "global.set('eprice',msg.payload.price.value);\nreturn msg;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1820,
        "wires": []
    },
    {
        "id": "39ab8281a318a080",
        "type": "mqtt out",
        "z": "16343784c71a3679",
        "name": "Spot Price Ping",
        "topic": "$(SPOTPRICEPING)",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cf9f84d0.6fba78",
        "x": 460,
        "y": 1660,
        "wires": []
    },
    {
        "id": "2d7e90a31746dc7c",
        "type": "mqtt in",
        "z": "16343784c71a3679",
        "name": "Spot Price Reading",
        "topic": "$(SPOTPRICEREADING)",
        "qos": "0",
        "datatype": "auto",
        "broker": "cf9f84d0.6fba78",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 140,
        "y": 1820,
        "wires": [
            [
                "f3b00bbf2f5e3f78"
            ]
        ]
    },
    {
        "id": "3e7eb8a39741a94e",
        "type": "function",
        "z": "16343784c71a3679",
        "name": "Set cube Init flag",
        "func": "global.set('cubeInit', 2);\nreturn {topic: 'initCube', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "065d505d10fa535f"
            ]
        ]
    },
    {
        "id": "cf44f6bf.8956b8",
        "type": "websocket in",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 160,
        "y": 980,
        "wires": [
            [
                "ea909034.6fb25"
            ]
        ]
    },
    {
        "id": "62aaa250.9b67dc",
        "type": "websocket out",
        "z": "c4285970.3276d8",
        "name": "/blinky-power-relay/websocket",
        "server": "44b51478.9c022c",
        "client": "",
        "x": 950,
        "y": 980,
        "wires": []
    },
    {
        "id": "ea909034.6fb25",
        "type": "link out",
        "z": "c4285970.3276d8",
        "name": "Web socket out",
        "links": [
            "2f289f87.fe2ff",
            "c7f3b5bf.85c9a8",
            "916409fc.7bc138",
            "080e8b7be1b3f16a",
            "03abeb43e804a645"
        ],
        "x": 395,
        "y": 980,
        "wires": []
    },
    {
        "id": "d033193d.436d68",
        "type": "link in",
        "z": "c4285970.3276d8",
        "name": "Web socket in",
        "links": [
            "1cdcbcd8.9514e3",
            "78ceea9e.d0b204",
            "d0d46d90.cf476",
            "9c19993afce72c6e",
            "271517431040d03b"
        ],
        "x": 755,
        "y": 980,
        "wires": [
            [
                "62aaa250.9b67dc"
            ]
        ]
    },
    {
        "id": "f14573da.0a788",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "project",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "project",
        "payload": "PROJECT",
        "payloadType": "env",
        "x": 120,
        "y": 60,
        "wires": [
            [
                "938904a0.58d668"
            ]
        ]
    },
    {
        "id": "938904a0.58d668",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Save global env variables",
        "func": "global.set(msg.topic,msg.payload);\nreturn null;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 310,
        "y": 60,
        "wires": []
    },
    {
        "id": "ba79496e.4e42b8",
        "type": "exec",
        "z": "c4285970.3276d8",
        "command": "iwconfig",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 740,
        "y": 60,
        "wires": [
            [
                "25a2b2c8.26f4ce"
            ],
            [],
            []
        ]
    },
    {
        "id": "fc7d9351.a3d0a",
        "type": "inject",
        "z": "c4285970.3276d8",
        "name": "",
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 60,
        "wires": [
            [
                "ba79496e.4e42b8"
            ]
        ]
    },
    {
        "id": "25a2b2c8.26f4ce",
        "type": "function",
        "z": "c4285970.3276d8",
        "name": "Get Signal Quality",
        "func": "var info = msg.payload;\nvar linkStartIndex  = info.indexOf('Link Quality=');\nvar levelStartIndex = info.indexOf('Signal level=');\nvar linkQuality = Number(info.substring(linkStartIndex + 13, linkStartIndex + 15));\nvar signalLevel =  Number(info.substring(levelStartIndex + 13, levelStartIndex + 16));\nvar ssid = info.substring(info.indexOf('ESSID') + 7);\nssid = ssid.substring(0,ssid.indexOf('\"'));\nvar val = {linkQuality : linkQuality, signalLevel: signalLevel, ssid:ssid};\nglobal.set('linkQuality',linkQuality);\nglobal.set('signalLevel', signalLevel);\nglobal.set('ssid', ssid);\nreturn {topic :'test',payload : val};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 920,
        "y": 60,
        "wires": [
            []
        ]
    }
]